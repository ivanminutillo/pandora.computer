schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  id: ID!
  tradeNonce: BigInt!
  fpmmPoolMemberships(skip: Int = 0, first: Int = 100, orderBy: FpmmPoolMembership_orderBy, orderDirection: OrderDirection, where: FpmmPoolMembership_filter): [FpmmPoolMembership!]
  fpmmParticipations(skip: Int = 0, first: Int = 100, orderBy: FpmmParticipation_orderBy, orderDirection: OrderDirection, where: FpmmParticipation_filter): [FpmmParticipation!]
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tradeNonce: BigInt
  tradeNonce_not: BigInt
  tradeNonce_gt: BigInt
  tradeNonce_lt: BigInt
  tradeNonce_gte: BigInt
  tradeNonce_lte: BigInt
  tradeNonce_in: [BigInt!]
  tradeNonce_not_in: [BigInt!]
  fpmmPoolMemberships_: FpmmPoolMembership_filter
  fpmmParticipations_: FpmmParticipation_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  tradeNonce
  fpmmPoolMemberships
  fpmmParticipations
}

type Action {
  id: ID!
  addr: Bytes!
  data: Bytes!
  operation: BigInt!
  dataFlow: BigInt!
  value: BigInt!
  termsOkCheck: Boolean!
}

input Action_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  addr: Bytes
  addr_not: Bytes
  addr_gt: Bytes
  addr_lt: Bytes
  addr_gte: Bytes
  addr_lte: Bytes
  addr_in: [Bytes!]
  addr_not_in: [Bytes!]
  addr_contains: Bytes
  addr_not_contains: Bytes
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  operation: BigInt
  operation_not: BigInt
  operation_gt: BigInt
  operation_lt: BigInt
  operation_gte: BigInt
  operation_lte: BigInt
  operation_in: [BigInt!]
  operation_not_in: [BigInt!]
  dataFlow: BigInt
  dataFlow_not: BigInt
  dataFlow_gt: BigInt
  dataFlow_lt: BigInt
  dataFlow_gte: BigInt
  dataFlow_lte: BigInt
  dataFlow_in: [BigInt!]
  dataFlow_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  termsOkCheck: Boolean
  termsOkCheck_not: Boolean
  termsOkCheck_in: [Boolean!]
  termsOkCheck_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Action_filter]
  or: [Action_filter]
}

enum Action_orderBy {
  id
  addr
  data
  operation
  dataFlow
  value
  termsOkCheck
}

enum Aggregation_interval {
  hour
  day
}

type Answer {
  id: ID!
  answer: Bytes!
  bondAggregate: BigInt!
  question: Question!
}

input Answer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  answer: Bytes
  answer_not: Bytes
  answer_gt: Bytes
  answer_lt: Bytes
  answer_gte: Bytes
  answer_lte: Bytes
  answer_in: [Bytes!]
  answer_not_in: [Bytes!]
  answer_contains: Bytes
  answer_not_contains: Bytes
  bondAggregate: BigInt
  bondAggregate_not: BigInt
  bondAggregate_gt: BigInt
  bondAggregate_lt: BigInt
  bondAggregate_gte: BigInt
  bondAggregate_lte: BigInt
  bondAggregate_in: [BigInt!]
  bondAggregate_not_in: [BigInt!]
  question: String
  question_not: String
  question_gt: String
  question_lt: String
  question_gte: String
  question_lte: String
  question_in: [String!]
  question_not_in: [String!]
  question_contains: String
  question_contains_nocase: String
  question_not_contains: String
  question_not_contains_nocase: String
  question_starts_with: String
  question_starts_with_nocase: String
  question_not_starts_with: String
  question_not_starts_with_nocase: String
  question_ends_with: String
  question_ends_with_nocase: String
  question_not_ends_with: String
  question_not_ends_with_nocase: String
  question_: Question_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Answer_filter]
  or: [Answer_filter]
}

enum Answer_orderBy {
  id
  answer
  bondAggregate
  question
  question__id
  question__templateId
  question__data
  question__title
  question__category
  question__language
  question__arbitrator
  question__openingTimestamp
  question__timeout
  question__currentAnswer
  question__currentAnswerBond
  question__currentAnswerTimestamp
  question__isPendingArbitration
  question__arbitrationOccurred
  question__answerFinalizedTimestamp
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Category {
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

input Category_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  numConditions: Int
  numConditions_not: Int
  numConditions_gt: Int
  numConditions_lt: Int
  numConditions_gte: Int
  numConditions_lte: Int
  numConditions_in: [Int!]
  numConditions_not_in: [Int!]
  numOpenConditions: Int
  numOpenConditions_not: Int
  numOpenConditions_gt: Int
  numOpenConditions_lt: Int
  numOpenConditions_gte: Int
  numOpenConditions_lte: Int
  numOpenConditions_in: [Int!]
  numOpenConditions_not_in: [Int!]
  numClosedConditions: Int
  numClosedConditions_not: Int
  numClosedConditions_gt: Int
  numClosedConditions_lt: Int
  numClosedConditions_gte: Int
  numClosedConditions_lte: Int
  numClosedConditions_in: [Int!]
  numClosedConditions_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Category_filter]
  or: [Category_filter]
}

enum Category_orderBy {
  id
  numConditions
  numOpenConditions
  numClosedConditions
}

type Condition {
  id: ID!
  oracle: Bytes!
  questionId: Bytes!
  question: Question
  outcomeSlotCount: Int!
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  scalarLow: BigInt
  scalarHigh: BigInt
  fixedProductMarketMakers(skip: Int = 0, first: Int = 100, orderBy: FixedProductMarketMaker_orderBy, orderDirection: OrderDirection, where: FixedProductMarketMaker_filter): [FixedProductMarketMaker!]!
}

input Condition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  oracle: Bytes
  oracle_not: Bytes
  oracle_gt: Bytes
  oracle_lt: Bytes
  oracle_gte: Bytes
  oracle_lte: Bytes
  oracle_in: [Bytes!]
  oracle_not_in: [Bytes!]
  oracle_contains: Bytes
  oracle_not_contains: Bytes
  questionId: Bytes
  questionId_not: Bytes
  questionId_gt: Bytes
  questionId_lt: Bytes
  questionId_gte: Bytes
  questionId_lte: Bytes
  questionId_in: [Bytes!]
  questionId_not_in: [Bytes!]
  questionId_contains: Bytes
  questionId_not_contains: Bytes
  question: String
  question_not: String
  question_gt: String
  question_lt: String
  question_gte: String
  question_lte: String
  question_in: [String!]
  question_not_in: [String!]
  question_contains: String
  question_contains_nocase: String
  question_not_contains: String
  question_not_contains_nocase: String
  question_starts_with: String
  question_starts_with_nocase: String
  question_not_starts_with: String
  question_not_starts_with_nocase: String
  question_ends_with: String
  question_ends_with_nocase: String
  question_not_ends_with: String
  question_not_ends_with_nocase: String
  question_: Question_filter
  outcomeSlotCount: Int
  outcomeSlotCount_not: Int
  outcomeSlotCount_gt: Int
  outcomeSlotCount_lt: Int
  outcomeSlotCount_gte: Int
  outcomeSlotCount_lte: Int
  outcomeSlotCount_in: [Int!]
  outcomeSlotCount_not_in: [Int!]
  resolutionTimestamp: BigInt
  resolutionTimestamp_not: BigInt
  resolutionTimestamp_gt: BigInt
  resolutionTimestamp_lt: BigInt
  resolutionTimestamp_gte: BigInt
  resolutionTimestamp_lte: BigInt
  resolutionTimestamp_in: [BigInt!]
  resolutionTimestamp_not_in: [BigInt!]
  payouts: [BigDecimal!]
  payouts_not: [BigDecimal!]
  payouts_contains: [BigDecimal!]
  payouts_contains_nocase: [BigDecimal!]
  payouts_not_contains: [BigDecimal!]
  payouts_not_contains_nocase: [BigDecimal!]
  scalarLow: BigInt
  scalarLow_not: BigInt
  scalarLow_gt: BigInt
  scalarLow_lt: BigInt
  scalarLow_gte: BigInt
  scalarLow_lte: BigInt
  scalarLow_in: [BigInt!]
  scalarLow_not_in: [BigInt!]
  scalarHigh: BigInt
  scalarHigh_not: BigInt
  scalarHigh_gt: BigInt
  scalarHigh_lt: BigInt
  scalarHigh_gte: BigInt
  scalarHigh_lte: BigInt
  scalarHigh_in: [BigInt!]
  scalarHigh_not_in: [BigInt!]
  fixedProductMarketMakers_: FixedProductMarketMaker_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Condition_filter]
  or: [Condition_filter]
}

enum Condition_orderBy {
  id
  oracle
  questionId
  question
  question__id
  question__templateId
  question__data
  question__title
  question__category
  question__language
  question__arbitrator
  question__openingTimestamp
  question__timeout
  question__currentAnswer
  question__currentAnswerBond
  question__currentAnswerTimestamp
  question__isPendingArbitration
  question__arbitrationOccurred
  question__answerFinalizedTimestamp
  outcomeSlotCount
  resolutionTimestamp
  payouts
  scalarLow
  scalarHigh
  fixedProductMarketMakers
}

type FixedProductMarketMaker {
  id: ID!
  creator: Bytes!
  creationTimestamp: BigInt!
  collateralToken: Bytes!
  conditions(skip: Int = 0, first: Int = 100, orderBy: Condition_orderBy, orderDirection: OrderDirection, where: Condition_filter): [Condition!]!
  fee: BigInt!
  collateralVolume: BigInt!
  scaledCollateralVolume: BigDecimal!
  usdVolume: BigDecimal!
  outcomeTokenAmounts: [BigInt!]!
  outcomeTokenMarginalPrices: [BigDecimal!]
  outcomeSlotCount: Int
  liquidityMeasure: BigInt!
  scaledLiquidityMeasure: BigDecimal!
  usdLiquidityMeasure: BigDecimal!
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!
  usdLiquidityParameter: BigDecimal!
  lastActiveDay: BigInt!
  lastActiveHour: BigInt!
  collateralVolumeBeforeLastActiveDayByHour: [BigInt!]!
  usdVolumeBeforeLastActiveDayByHour: [BigDecimal!]!
  runningDailyVolume: BigInt!
  scaledRunningDailyVolume: BigDecimal!
  usdRunningDailyVolume: BigDecimal!
  lastActiveDayAndRunningDailyVolume: BigInt!
  lastActiveDayAndScaledRunningDailyVolume: BigInt!
  runningDailyVolumeByHour: [BigInt!]!
  usdRunningDailyVolumeByHour: [BigDecimal!]!
  sort24HourVolume0: BigDecimal!
  sort24HourVolume1: BigDecimal!
  sort24HourVolume2: BigDecimal!
  sort24HourVolume3: BigDecimal!
  sort24HourVolume4: BigDecimal!
  sort24HourVolume5: BigDecimal!
  sort24HourVolume6: BigDecimal!
  sort24HourVolume7: BigDecimal!
  sort24HourVolume8: BigDecimal!
  sort24HourVolume9: BigDecimal!
  sort24HourVolume10: BigDecimal!
  sort24HourVolume11: BigDecimal!
  sort24HourVolume12: BigDecimal!
  sort24HourVolume13: BigDecimal!
  sort24HourVolume14: BigDecimal!
  sort24HourVolume15: BigDecimal!
  sort24HourVolume16: BigDecimal!
  sort24HourVolume17: BigDecimal!
  sort24HourVolume18: BigDecimal!
  sort24HourVolume19: BigDecimal!
  sort24HourVolume20: BigDecimal!
  sort24HourVolume21: BigDecimal!
  sort24HourVolume22: BigDecimal!
  sort24HourVolume23: BigDecimal!
  indexedOnQuestion: Boolean!
  curatedByDxDao: Boolean!
  condition: Condition
  question: Question
  scalarLow: BigInt
  scalarHigh: BigInt
  templateId: BigInt
  data: String
  title: String
  outcomes: [String!]
  category: String
  language: String
  arbitrator: Bytes
  openingTimestamp: BigInt
  timeout: BigInt
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt
  isPendingArbitration: Boolean
  arbitrationOccurred: Boolean
  answerFinalizedTimestamp: BigInt
  poolMembers(skip: Int = 0, first: Int = 100, orderBy: FpmmPoolMembership_orderBy, orderDirection: OrderDirection, where: FpmmPoolMembership_filter): [FpmmPoolMembership!]
  participants(skip: Int = 0, first: Int = 100, orderBy: FpmmParticipation_orderBy, orderDirection: OrderDirection, where: FpmmParticipation_filter): [FpmmParticipation!]
  submissionIDs(skip: Int = 0, first: Int = 100, orderBy: KlerosSubmission_orderBy, orderDirection: OrderDirection, where: KlerosSubmission_filter): [KlerosSubmission!]!
  klerosTCRregistered: Boolean!
  curatedByDxDaoOrKleros: Boolean!
}

input FixedProductMarketMaker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  creator: Bytes
  creator_not: Bytes
  creator_gt: Bytes
  creator_lt: Bytes
  creator_gte: Bytes
  creator_lte: Bytes
  creator_in: [Bytes!]
  creator_not_in: [Bytes!]
  creator_contains: Bytes
  creator_not_contains: Bytes
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  conditions: [String!]
  conditions_not: [String!]
  conditions_contains: [String!]
  conditions_contains_nocase: [String!]
  conditions_not_contains: [String!]
  conditions_not_contains_nocase: [String!]
  conditions_: Condition_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  collateralVolume: BigInt
  collateralVolume_not: BigInt
  collateralVolume_gt: BigInt
  collateralVolume_lt: BigInt
  collateralVolume_gte: BigInt
  collateralVolume_lte: BigInt
  collateralVolume_in: [BigInt!]
  collateralVolume_not_in: [BigInt!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  usdVolume: BigDecimal
  usdVolume_not: BigDecimal
  usdVolume_gt: BigDecimal
  usdVolume_lt: BigDecimal
  usdVolume_gte: BigDecimal
  usdVolume_lte: BigDecimal
  usdVolume_in: [BigDecimal!]
  usdVolume_not_in: [BigDecimal!]
  outcomeTokenAmounts: [BigInt!]
  outcomeTokenAmounts_not: [BigInt!]
  outcomeTokenAmounts_contains: [BigInt!]
  outcomeTokenAmounts_contains_nocase: [BigInt!]
  outcomeTokenAmounts_not_contains: [BigInt!]
  outcomeTokenAmounts_not_contains_nocase: [BigInt!]
  outcomeTokenMarginalPrices: [BigDecimal!]
  outcomeTokenMarginalPrices_not: [BigDecimal!]
  outcomeTokenMarginalPrices_contains: [BigDecimal!]
  outcomeTokenMarginalPrices_contains_nocase: [BigDecimal!]
  outcomeTokenMarginalPrices_not_contains: [BigDecimal!]
  outcomeTokenMarginalPrices_not_contains_nocase: [BigDecimal!]
  outcomeSlotCount: Int
  outcomeSlotCount_not: Int
  outcomeSlotCount_gt: Int
  outcomeSlotCount_lt: Int
  outcomeSlotCount_gte: Int
  outcomeSlotCount_lte: Int
  outcomeSlotCount_in: [Int!]
  outcomeSlotCount_not_in: [Int!]
  liquidityMeasure: BigInt
  liquidityMeasure_not: BigInt
  liquidityMeasure_gt: BigInt
  liquidityMeasure_lt: BigInt
  liquidityMeasure_gte: BigInt
  liquidityMeasure_lte: BigInt
  liquidityMeasure_in: [BigInt!]
  liquidityMeasure_not_in: [BigInt!]
  scaledLiquidityMeasure: BigDecimal
  scaledLiquidityMeasure_not: BigDecimal
  scaledLiquidityMeasure_gt: BigDecimal
  scaledLiquidityMeasure_lt: BigDecimal
  scaledLiquidityMeasure_gte: BigDecimal
  scaledLiquidityMeasure_lte: BigDecimal
  scaledLiquidityMeasure_in: [BigDecimal!]
  scaledLiquidityMeasure_not_in: [BigDecimal!]
  usdLiquidityMeasure: BigDecimal
  usdLiquidityMeasure_not: BigDecimal
  usdLiquidityMeasure_gt: BigDecimal
  usdLiquidityMeasure_lt: BigDecimal
  usdLiquidityMeasure_gte: BigDecimal
  usdLiquidityMeasure_lte: BigDecimal
  usdLiquidityMeasure_in: [BigDecimal!]
  usdLiquidityMeasure_not_in: [BigDecimal!]
  liquidityParameter: BigInt
  liquidityParameter_not: BigInt
  liquidityParameter_gt: BigInt
  liquidityParameter_lt: BigInt
  liquidityParameter_gte: BigInt
  liquidityParameter_lte: BigInt
  liquidityParameter_in: [BigInt!]
  liquidityParameter_not_in: [BigInt!]
  scaledLiquidityParameter: BigDecimal
  scaledLiquidityParameter_not: BigDecimal
  scaledLiquidityParameter_gt: BigDecimal
  scaledLiquidityParameter_lt: BigDecimal
  scaledLiquidityParameter_gte: BigDecimal
  scaledLiquidityParameter_lte: BigDecimal
  scaledLiquidityParameter_in: [BigDecimal!]
  scaledLiquidityParameter_not_in: [BigDecimal!]
  usdLiquidityParameter: BigDecimal
  usdLiquidityParameter_not: BigDecimal
  usdLiquidityParameter_gt: BigDecimal
  usdLiquidityParameter_lt: BigDecimal
  usdLiquidityParameter_gte: BigDecimal
  usdLiquidityParameter_lte: BigDecimal
  usdLiquidityParameter_in: [BigDecimal!]
  usdLiquidityParameter_not_in: [BigDecimal!]
  lastActiveDay: BigInt
  lastActiveDay_not: BigInt
  lastActiveDay_gt: BigInt
  lastActiveDay_lt: BigInt
  lastActiveDay_gte: BigInt
  lastActiveDay_lte: BigInt
  lastActiveDay_in: [BigInt!]
  lastActiveDay_not_in: [BigInt!]
  lastActiveHour: BigInt
  lastActiveHour_not: BigInt
  lastActiveHour_gt: BigInt
  lastActiveHour_lt: BigInt
  lastActiveHour_gte: BigInt
  lastActiveHour_lte: BigInt
  lastActiveHour_in: [BigInt!]
  lastActiveHour_not_in: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour_not: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour_contains: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour_contains_nocase: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour_not_contains: [BigInt!]
  collateralVolumeBeforeLastActiveDayByHour_not_contains_nocase: [BigInt!]
  usdVolumeBeforeLastActiveDayByHour: [BigDecimal!]
  usdVolumeBeforeLastActiveDayByHour_not: [BigDecimal!]
  usdVolumeBeforeLastActiveDayByHour_contains: [BigDecimal!]
  usdVolumeBeforeLastActiveDayByHour_contains_nocase: [BigDecimal!]
  usdVolumeBeforeLastActiveDayByHour_not_contains: [BigDecimal!]
  usdVolumeBeforeLastActiveDayByHour_not_contains_nocase: [BigDecimal!]
  runningDailyVolume: BigInt
  runningDailyVolume_not: BigInt
  runningDailyVolume_gt: BigInt
  runningDailyVolume_lt: BigInt
  runningDailyVolume_gte: BigInt
  runningDailyVolume_lte: BigInt
  runningDailyVolume_in: [BigInt!]
  runningDailyVolume_not_in: [BigInt!]
  scaledRunningDailyVolume: BigDecimal
  scaledRunningDailyVolume_not: BigDecimal
  scaledRunningDailyVolume_gt: BigDecimal
  scaledRunningDailyVolume_lt: BigDecimal
  scaledRunningDailyVolume_gte: BigDecimal
  scaledRunningDailyVolume_lte: BigDecimal
  scaledRunningDailyVolume_in: [BigDecimal!]
  scaledRunningDailyVolume_not_in: [BigDecimal!]
  usdRunningDailyVolume: BigDecimal
  usdRunningDailyVolume_not: BigDecimal
  usdRunningDailyVolume_gt: BigDecimal
  usdRunningDailyVolume_lt: BigDecimal
  usdRunningDailyVolume_gte: BigDecimal
  usdRunningDailyVolume_lte: BigDecimal
  usdRunningDailyVolume_in: [BigDecimal!]
  usdRunningDailyVolume_not_in: [BigDecimal!]
  lastActiveDayAndRunningDailyVolume: BigInt
  lastActiveDayAndRunningDailyVolume_not: BigInt
  lastActiveDayAndRunningDailyVolume_gt: BigInt
  lastActiveDayAndRunningDailyVolume_lt: BigInt
  lastActiveDayAndRunningDailyVolume_gte: BigInt
  lastActiveDayAndRunningDailyVolume_lte: BigInt
  lastActiveDayAndRunningDailyVolume_in: [BigInt!]
  lastActiveDayAndRunningDailyVolume_not_in: [BigInt!]
  lastActiveDayAndScaledRunningDailyVolume: BigInt
  lastActiveDayAndScaledRunningDailyVolume_not: BigInt
  lastActiveDayAndScaledRunningDailyVolume_gt: BigInt
  lastActiveDayAndScaledRunningDailyVolume_lt: BigInt
  lastActiveDayAndScaledRunningDailyVolume_gte: BigInt
  lastActiveDayAndScaledRunningDailyVolume_lte: BigInt
  lastActiveDayAndScaledRunningDailyVolume_in: [BigInt!]
  lastActiveDayAndScaledRunningDailyVolume_not_in: [BigInt!]
  runningDailyVolumeByHour: [BigInt!]
  runningDailyVolumeByHour_not: [BigInt!]
  runningDailyVolumeByHour_contains: [BigInt!]
  runningDailyVolumeByHour_contains_nocase: [BigInt!]
  runningDailyVolumeByHour_not_contains: [BigInt!]
  runningDailyVolumeByHour_not_contains_nocase: [BigInt!]
  usdRunningDailyVolumeByHour: [BigDecimal!]
  usdRunningDailyVolumeByHour_not: [BigDecimal!]
  usdRunningDailyVolumeByHour_contains: [BigDecimal!]
  usdRunningDailyVolumeByHour_contains_nocase: [BigDecimal!]
  usdRunningDailyVolumeByHour_not_contains: [BigDecimal!]
  usdRunningDailyVolumeByHour_not_contains_nocase: [BigDecimal!]
  sort24HourVolume0: BigDecimal
  sort24HourVolume0_not: BigDecimal
  sort24HourVolume0_gt: BigDecimal
  sort24HourVolume0_lt: BigDecimal
  sort24HourVolume0_gte: BigDecimal
  sort24HourVolume0_lte: BigDecimal
  sort24HourVolume0_in: [BigDecimal!]
  sort24HourVolume0_not_in: [BigDecimal!]
  sort24HourVolume1: BigDecimal
  sort24HourVolume1_not: BigDecimal
  sort24HourVolume1_gt: BigDecimal
  sort24HourVolume1_lt: BigDecimal
  sort24HourVolume1_gte: BigDecimal
  sort24HourVolume1_lte: BigDecimal
  sort24HourVolume1_in: [BigDecimal!]
  sort24HourVolume1_not_in: [BigDecimal!]
  sort24HourVolume2: BigDecimal
  sort24HourVolume2_not: BigDecimal
  sort24HourVolume2_gt: BigDecimal
  sort24HourVolume2_lt: BigDecimal
  sort24HourVolume2_gte: BigDecimal
  sort24HourVolume2_lte: BigDecimal
  sort24HourVolume2_in: [BigDecimal!]
  sort24HourVolume2_not_in: [BigDecimal!]
  sort24HourVolume3: BigDecimal
  sort24HourVolume3_not: BigDecimal
  sort24HourVolume3_gt: BigDecimal
  sort24HourVolume3_lt: BigDecimal
  sort24HourVolume3_gte: BigDecimal
  sort24HourVolume3_lte: BigDecimal
  sort24HourVolume3_in: [BigDecimal!]
  sort24HourVolume3_not_in: [BigDecimal!]
  sort24HourVolume4: BigDecimal
  sort24HourVolume4_not: BigDecimal
  sort24HourVolume4_gt: BigDecimal
  sort24HourVolume4_lt: BigDecimal
  sort24HourVolume4_gte: BigDecimal
  sort24HourVolume4_lte: BigDecimal
  sort24HourVolume4_in: [BigDecimal!]
  sort24HourVolume4_not_in: [BigDecimal!]
  sort24HourVolume5: BigDecimal
  sort24HourVolume5_not: BigDecimal
  sort24HourVolume5_gt: BigDecimal
  sort24HourVolume5_lt: BigDecimal
  sort24HourVolume5_gte: BigDecimal
  sort24HourVolume5_lte: BigDecimal
  sort24HourVolume5_in: [BigDecimal!]
  sort24HourVolume5_not_in: [BigDecimal!]
  sort24HourVolume6: BigDecimal
  sort24HourVolume6_not: BigDecimal
  sort24HourVolume6_gt: BigDecimal
  sort24HourVolume6_lt: BigDecimal
  sort24HourVolume6_gte: BigDecimal
  sort24HourVolume6_lte: BigDecimal
  sort24HourVolume6_in: [BigDecimal!]
  sort24HourVolume6_not_in: [BigDecimal!]
  sort24HourVolume7: BigDecimal
  sort24HourVolume7_not: BigDecimal
  sort24HourVolume7_gt: BigDecimal
  sort24HourVolume7_lt: BigDecimal
  sort24HourVolume7_gte: BigDecimal
  sort24HourVolume7_lte: BigDecimal
  sort24HourVolume7_in: [BigDecimal!]
  sort24HourVolume7_not_in: [BigDecimal!]
  sort24HourVolume8: BigDecimal
  sort24HourVolume8_not: BigDecimal
  sort24HourVolume8_gt: BigDecimal
  sort24HourVolume8_lt: BigDecimal
  sort24HourVolume8_gte: BigDecimal
  sort24HourVolume8_lte: BigDecimal
  sort24HourVolume8_in: [BigDecimal!]
  sort24HourVolume8_not_in: [BigDecimal!]
  sort24HourVolume9: BigDecimal
  sort24HourVolume9_not: BigDecimal
  sort24HourVolume9_gt: BigDecimal
  sort24HourVolume9_lt: BigDecimal
  sort24HourVolume9_gte: BigDecimal
  sort24HourVolume9_lte: BigDecimal
  sort24HourVolume9_in: [BigDecimal!]
  sort24HourVolume9_not_in: [BigDecimal!]
  sort24HourVolume10: BigDecimal
  sort24HourVolume10_not: BigDecimal
  sort24HourVolume10_gt: BigDecimal
  sort24HourVolume10_lt: BigDecimal
  sort24HourVolume10_gte: BigDecimal
  sort24HourVolume10_lte: BigDecimal
  sort24HourVolume10_in: [BigDecimal!]
  sort24HourVolume10_not_in: [BigDecimal!]
  sort24HourVolume11: BigDecimal
  sort24HourVolume11_not: BigDecimal
  sort24HourVolume11_gt: BigDecimal
  sort24HourVolume11_lt: BigDecimal
  sort24HourVolume11_gte: BigDecimal
  sort24HourVolume11_lte: BigDecimal
  sort24HourVolume11_in: [BigDecimal!]
  sort24HourVolume11_not_in: [BigDecimal!]
  sort24HourVolume12: BigDecimal
  sort24HourVolume12_not: BigDecimal
  sort24HourVolume12_gt: BigDecimal
  sort24HourVolume12_lt: BigDecimal
  sort24HourVolume12_gte: BigDecimal
  sort24HourVolume12_lte: BigDecimal
  sort24HourVolume12_in: [BigDecimal!]
  sort24HourVolume12_not_in: [BigDecimal!]
  sort24HourVolume13: BigDecimal
  sort24HourVolume13_not: BigDecimal
  sort24HourVolume13_gt: BigDecimal
  sort24HourVolume13_lt: BigDecimal
  sort24HourVolume13_gte: BigDecimal
  sort24HourVolume13_lte: BigDecimal
  sort24HourVolume13_in: [BigDecimal!]
  sort24HourVolume13_not_in: [BigDecimal!]
  sort24HourVolume14: BigDecimal
  sort24HourVolume14_not: BigDecimal
  sort24HourVolume14_gt: BigDecimal
  sort24HourVolume14_lt: BigDecimal
  sort24HourVolume14_gte: BigDecimal
  sort24HourVolume14_lte: BigDecimal
  sort24HourVolume14_in: [BigDecimal!]
  sort24HourVolume14_not_in: [BigDecimal!]
  sort24HourVolume15: BigDecimal
  sort24HourVolume15_not: BigDecimal
  sort24HourVolume15_gt: BigDecimal
  sort24HourVolume15_lt: BigDecimal
  sort24HourVolume15_gte: BigDecimal
  sort24HourVolume15_lte: BigDecimal
  sort24HourVolume15_in: [BigDecimal!]
  sort24HourVolume15_not_in: [BigDecimal!]
  sort24HourVolume16: BigDecimal
  sort24HourVolume16_not: BigDecimal
  sort24HourVolume16_gt: BigDecimal
  sort24HourVolume16_lt: BigDecimal
  sort24HourVolume16_gte: BigDecimal
  sort24HourVolume16_lte: BigDecimal
  sort24HourVolume16_in: [BigDecimal!]
  sort24HourVolume16_not_in: [BigDecimal!]
  sort24HourVolume17: BigDecimal
  sort24HourVolume17_not: BigDecimal
  sort24HourVolume17_gt: BigDecimal
  sort24HourVolume17_lt: BigDecimal
  sort24HourVolume17_gte: BigDecimal
  sort24HourVolume17_lte: BigDecimal
  sort24HourVolume17_in: [BigDecimal!]
  sort24HourVolume17_not_in: [BigDecimal!]
  sort24HourVolume18: BigDecimal
  sort24HourVolume18_not: BigDecimal
  sort24HourVolume18_gt: BigDecimal
  sort24HourVolume18_lt: BigDecimal
  sort24HourVolume18_gte: BigDecimal
  sort24HourVolume18_lte: BigDecimal
  sort24HourVolume18_in: [BigDecimal!]
  sort24HourVolume18_not_in: [BigDecimal!]
  sort24HourVolume19: BigDecimal
  sort24HourVolume19_not: BigDecimal
  sort24HourVolume19_gt: BigDecimal
  sort24HourVolume19_lt: BigDecimal
  sort24HourVolume19_gte: BigDecimal
  sort24HourVolume19_lte: BigDecimal
  sort24HourVolume19_in: [BigDecimal!]
  sort24HourVolume19_not_in: [BigDecimal!]
  sort24HourVolume20: BigDecimal
  sort24HourVolume20_not: BigDecimal
  sort24HourVolume20_gt: BigDecimal
  sort24HourVolume20_lt: BigDecimal
  sort24HourVolume20_gte: BigDecimal
  sort24HourVolume20_lte: BigDecimal
  sort24HourVolume20_in: [BigDecimal!]
  sort24HourVolume20_not_in: [BigDecimal!]
  sort24HourVolume21: BigDecimal
  sort24HourVolume21_not: BigDecimal
  sort24HourVolume21_gt: BigDecimal
  sort24HourVolume21_lt: BigDecimal
  sort24HourVolume21_gte: BigDecimal
  sort24HourVolume21_lte: BigDecimal
  sort24HourVolume21_in: [BigDecimal!]
  sort24HourVolume21_not_in: [BigDecimal!]
  sort24HourVolume22: BigDecimal
  sort24HourVolume22_not: BigDecimal
  sort24HourVolume22_gt: BigDecimal
  sort24HourVolume22_lt: BigDecimal
  sort24HourVolume22_gte: BigDecimal
  sort24HourVolume22_lte: BigDecimal
  sort24HourVolume22_in: [BigDecimal!]
  sort24HourVolume22_not_in: [BigDecimal!]
  sort24HourVolume23: BigDecimal
  sort24HourVolume23_not: BigDecimal
  sort24HourVolume23_gt: BigDecimal
  sort24HourVolume23_lt: BigDecimal
  sort24HourVolume23_gte: BigDecimal
  sort24HourVolume23_lte: BigDecimal
  sort24HourVolume23_in: [BigDecimal!]
  sort24HourVolume23_not_in: [BigDecimal!]
  indexedOnQuestion: Boolean
  indexedOnQuestion_not: Boolean
  indexedOnQuestion_in: [Boolean!]
  indexedOnQuestion_not_in: [Boolean!]
  curatedByDxDao: Boolean
  curatedByDxDao_not: Boolean
  curatedByDxDao_in: [Boolean!]
  curatedByDxDao_not_in: [Boolean!]
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: Condition_filter
  question: String
  question_not: String
  question_gt: String
  question_lt: String
  question_gte: String
  question_lte: String
  question_in: [String!]
  question_not_in: [String!]
  question_contains: String
  question_contains_nocase: String
  question_not_contains: String
  question_not_contains_nocase: String
  question_starts_with: String
  question_starts_with_nocase: String
  question_not_starts_with: String
  question_not_starts_with_nocase: String
  question_ends_with: String
  question_ends_with_nocase: String
  question_not_ends_with: String
  question_not_ends_with_nocase: String
  question_: Question_filter
  scalarLow: BigInt
  scalarLow_not: BigInt
  scalarLow_gt: BigInt
  scalarLow_lt: BigInt
  scalarLow_gte: BigInt
  scalarLow_lte: BigInt
  scalarLow_in: [BigInt!]
  scalarLow_not_in: [BigInt!]
  scalarHigh: BigInt
  scalarHigh_not: BigInt
  scalarHigh_gt: BigInt
  scalarHigh_lt: BigInt
  scalarHigh_gte: BigInt
  scalarHigh_lte: BigInt
  scalarHigh_in: [BigInt!]
  scalarHigh_not_in: [BigInt!]
  templateId: BigInt
  templateId_not: BigInt
  templateId_gt: BigInt
  templateId_lt: BigInt
  templateId_gte: BigInt
  templateId_lte: BigInt
  templateId_in: [BigInt!]
  templateId_not_in: [BigInt!]
  data: String
  data_not: String
  data_gt: String
  data_lt: String
  data_gte: String
  data_lte: String
  data_in: [String!]
  data_not_in: [String!]
  data_contains: String
  data_contains_nocase: String
  data_not_contains: String
  data_not_contains_nocase: String
  data_starts_with: String
  data_starts_with_nocase: String
  data_not_starts_with: String
  data_not_starts_with_nocase: String
  data_ends_with: String
  data_ends_with_nocase: String
  data_not_ends_with: String
  data_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  outcomes: [String!]
  outcomes_not: [String!]
  outcomes_contains: [String!]
  outcomes_contains_nocase: [String!]
  outcomes_not_contains: [String!]
  outcomes_not_contains_nocase: [String!]
  category: String
  category_not: String
  category_gt: String
  category_lt: String
  category_gte: String
  category_lte: String
  category_in: [String!]
  category_not_in: [String!]
  category_contains: String
  category_contains_nocase: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  language: String
  language_not: String
  language_gt: String
  language_lt: String
  language_gte: String
  language_lte: String
  language_in: [String!]
  language_not_in: [String!]
  language_contains: String
  language_contains_nocase: String
  language_not_contains: String
  language_not_contains_nocase: String
  language_starts_with: String
  language_starts_with_nocase: String
  language_not_starts_with: String
  language_not_starts_with_nocase: String
  language_ends_with: String
  language_ends_with_nocase: String
  language_not_ends_with: String
  language_not_ends_with_nocase: String
  arbitrator: Bytes
  arbitrator_not: Bytes
  arbitrator_gt: Bytes
  arbitrator_lt: Bytes
  arbitrator_gte: Bytes
  arbitrator_lte: Bytes
  arbitrator_in: [Bytes!]
  arbitrator_not_in: [Bytes!]
  arbitrator_contains: Bytes
  arbitrator_not_contains: Bytes
  openingTimestamp: BigInt
  openingTimestamp_not: BigInt
  openingTimestamp_gt: BigInt
  openingTimestamp_lt: BigInt
  openingTimestamp_gte: BigInt
  openingTimestamp_lte: BigInt
  openingTimestamp_in: [BigInt!]
  openingTimestamp_not_in: [BigInt!]
  timeout: BigInt
  timeout_not: BigInt
  timeout_gt: BigInt
  timeout_lt: BigInt
  timeout_gte: BigInt
  timeout_lte: BigInt
  timeout_in: [BigInt!]
  timeout_not_in: [BigInt!]
  resolutionTimestamp: BigInt
  resolutionTimestamp_not: BigInt
  resolutionTimestamp_gt: BigInt
  resolutionTimestamp_lt: BigInt
  resolutionTimestamp_gte: BigInt
  resolutionTimestamp_lte: BigInt
  resolutionTimestamp_in: [BigInt!]
  resolutionTimestamp_not_in: [BigInt!]
  payouts: [BigDecimal!]
  payouts_not: [BigDecimal!]
  payouts_contains: [BigDecimal!]
  payouts_contains_nocase: [BigDecimal!]
  payouts_not_contains: [BigDecimal!]
  payouts_not_contains_nocase: [BigDecimal!]
  currentAnswer: Bytes
  currentAnswer_not: Bytes
  currentAnswer_gt: Bytes
  currentAnswer_lt: Bytes
  currentAnswer_gte: Bytes
  currentAnswer_lte: Bytes
  currentAnswer_in: [Bytes!]
  currentAnswer_not_in: [Bytes!]
  currentAnswer_contains: Bytes
  currentAnswer_not_contains: Bytes
  currentAnswerBond: BigInt
  currentAnswerBond_not: BigInt
  currentAnswerBond_gt: BigInt
  currentAnswerBond_lt: BigInt
  currentAnswerBond_gte: BigInt
  currentAnswerBond_lte: BigInt
  currentAnswerBond_in: [BigInt!]
  currentAnswerBond_not_in: [BigInt!]
  currentAnswerTimestamp: BigInt
  currentAnswerTimestamp_not: BigInt
  currentAnswerTimestamp_gt: BigInt
  currentAnswerTimestamp_lt: BigInt
  currentAnswerTimestamp_gte: BigInt
  currentAnswerTimestamp_lte: BigInt
  currentAnswerTimestamp_in: [BigInt!]
  currentAnswerTimestamp_not_in: [BigInt!]
  isPendingArbitration: Boolean
  isPendingArbitration_not: Boolean
  isPendingArbitration_in: [Boolean!]
  isPendingArbitration_not_in: [Boolean!]
  arbitrationOccurred: Boolean
  arbitrationOccurred_not: Boolean
  arbitrationOccurred_in: [Boolean!]
  arbitrationOccurred_not_in: [Boolean!]
  answerFinalizedTimestamp: BigInt
  answerFinalizedTimestamp_not: BigInt
  answerFinalizedTimestamp_gt: BigInt
  answerFinalizedTimestamp_lt: BigInt
  answerFinalizedTimestamp_gte: BigInt
  answerFinalizedTimestamp_lte: BigInt
  answerFinalizedTimestamp_in: [BigInt!]
  answerFinalizedTimestamp_not_in: [BigInt!]
  poolMembers_: FpmmPoolMembership_filter
  participants_: FpmmParticipation_filter
  submissionIDs: [String!]
  submissionIDs_not: [String!]
  submissionIDs_contains: [String!]
  submissionIDs_contains_nocase: [String!]
  submissionIDs_not_contains: [String!]
  submissionIDs_not_contains_nocase: [String!]
  submissionIDs_: KlerosSubmission_filter
  klerosTCRregistered: Boolean
  klerosTCRregistered_not: Boolean
  klerosTCRregistered_in: [Boolean!]
  klerosTCRregistered_not_in: [Boolean!]
  curatedByDxDaoOrKleros: Boolean
  curatedByDxDaoOrKleros_not: Boolean
  curatedByDxDaoOrKleros_in: [Boolean!]
  curatedByDxDaoOrKleros_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FixedProductMarketMaker_filter]
  or: [FixedProductMarketMaker_filter]
}

enum FixedProductMarketMaker_orderBy {
  id
  creator
  creationTimestamp
  collateralToken
  conditions
  fee
  collateralVolume
  scaledCollateralVolume
  usdVolume
  outcomeTokenAmounts
  outcomeTokenMarginalPrices
  outcomeSlotCount
  liquidityMeasure
  scaledLiquidityMeasure
  usdLiquidityMeasure
  liquidityParameter
  scaledLiquidityParameter
  usdLiquidityParameter
  lastActiveDay
  lastActiveHour
  collateralVolumeBeforeLastActiveDayByHour
  usdVolumeBeforeLastActiveDayByHour
  runningDailyVolume
  scaledRunningDailyVolume
  usdRunningDailyVolume
  lastActiveDayAndRunningDailyVolume
  lastActiveDayAndScaledRunningDailyVolume
  runningDailyVolumeByHour
  usdRunningDailyVolumeByHour
  sort24HourVolume0
  sort24HourVolume1
  sort24HourVolume2
  sort24HourVolume3
  sort24HourVolume4
  sort24HourVolume5
  sort24HourVolume6
  sort24HourVolume7
  sort24HourVolume8
  sort24HourVolume9
  sort24HourVolume10
  sort24HourVolume11
  sort24HourVolume12
  sort24HourVolume13
  sort24HourVolume14
  sort24HourVolume15
  sort24HourVolume16
  sort24HourVolume17
  sort24HourVolume18
  sort24HourVolume19
  sort24HourVolume20
  sort24HourVolume21
  sort24HourVolume22
  sort24HourVolume23
  indexedOnQuestion
  curatedByDxDao
  condition
  condition__id
  condition__oracle
  condition__questionId
  condition__outcomeSlotCount
  condition__resolutionTimestamp
  condition__scalarLow
  condition__scalarHigh
  question
  question__id
  question__templateId
  question__data
  question__title
  question__category
  question__language
  question__arbitrator
  question__openingTimestamp
  question__timeout
  question__currentAnswer
  question__currentAnswerBond
  question__currentAnswerTimestamp
  question__isPendingArbitration
  question__arbitrationOccurred
  question__answerFinalizedTimestamp
  scalarLow
  scalarHigh
  templateId
  data
  title
  outcomes
  category
  language
  arbitrator
  openingTimestamp
  timeout
  resolutionTimestamp
  payouts
  currentAnswer
  currentAnswerBond
  currentAnswerTimestamp
  isPendingArbitration
  arbitrationOccurred
  answerFinalizedTimestamp
  poolMembers
  participants
  submissionIDs
  klerosTCRregistered
  curatedByDxDaoOrKleros
}

type FpmmLiquidity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  type: LiquidityType!
  outcomeTokenAmounts: [BigInt!]
  collateralTokenAmount: BigInt!
  additionalLiquidityParameter: BigInt!
  funder: Account!
  sharesAmount: BigInt!
  collateralRemovedFromFeePool: BigInt
  creationTimestamp: BigInt!
  transactionHash: Bytes!
  additionalSharesCost: BigInt!
}

input FpmmLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  type: LiquidityType
  type_not: LiquidityType
  type_in: [LiquidityType!]
  type_not_in: [LiquidityType!]
  outcomeTokenAmounts: [BigInt!]
  outcomeTokenAmounts_not: [BigInt!]
  outcomeTokenAmounts_contains: [BigInt!]
  outcomeTokenAmounts_contains_nocase: [BigInt!]
  outcomeTokenAmounts_not_contains: [BigInt!]
  outcomeTokenAmounts_not_contains_nocase: [BigInt!]
  collateralTokenAmount: BigInt
  collateralTokenAmount_not: BigInt
  collateralTokenAmount_gt: BigInt
  collateralTokenAmount_lt: BigInt
  collateralTokenAmount_gte: BigInt
  collateralTokenAmount_lte: BigInt
  collateralTokenAmount_in: [BigInt!]
  collateralTokenAmount_not_in: [BigInt!]
  additionalLiquidityParameter: BigInt
  additionalLiquidityParameter_not: BigInt
  additionalLiquidityParameter_gt: BigInt
  additionalLiquidityParameter_lt: BigInt
  additionalLiquidityParameter_gte: BigInt
  additionalLiquidityParameter_lte: BigInt
  additionalLiquidityParameter_in: [BigInt!]
  additionalLiquidityParameter_not_in: [BigInt!]
  funder: String
  funder_not: String
  funder_gt: String
  funder_lt: String
  funder_gte: String
  funder_lte: String
  funder_in: [String!]
  funder_not_in: [String!]
  funder_contains: String
  funder_contains_nocase: String
  funder_not_contains: String
  funder_not_contains_nocase: String
  funder_starts_with: String
  funder_starts_with_nocase: String
  funder_not_starts_with: String
  funder_not_starts_with_nocase: String
  funder_ends_with: String
  funder_ends_with_nocase: String
  funder_not_ends_with: String
  funder_not_ends_with_nocase: String
  funder_: Account_filter
  sharesAmount: BigInt
  sharesAmount_not: BigInt
  sharesAmount_gt: BigInt
  sharesAmount_lt: BigInt
  sharesAmount_gte: BigInt
  sharesAmount_lte: BigInt
  sharesAmount_in: [BigInt!]
  sharesAmount_not_in: [BigInt!]
  collateralRemovedFromFeePool: BigInt
  collateralRemovedFromFeePool_not: BigInt
  collateralRemovedFromFeePool_gt: BigInt
  collateralRemovedFromFeePool_lt: BigInt
  collateralRemovedFromFeePool_gte: BigInt
  collateralRemovedFromFeePool_lte: BigInt
  collateralRemovedFromFeePool_in: [BigInt!]
  collateralRemovedFromFeePool_not_in: [BigInt!]
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  additionalSharesCost: BigInt
  additionalSharesCost_not: BigInt
  additionalSharesCost_gt: BigInt
  additionalSharesCost_lt: BigInt
  additionalSharesCost_gte: BigInt
  additionalSharesCost_lte: BigInt
  additionalSharesCost_in: [BigInt!]
  additionalSharesCost_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmLiquidity_filter]
  or: [FpmmLiquidity_filter]
}

enum FpmmLiquidity_orderBy {
  id
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__collateralToken
  fpmm__fee
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__usdVolume
  fpmm__outcomeSlotCount
  fpmm__liquidityMeasure
  fpmm__scaledLiquidityMeasure
  fpmm__usdLiquidityMeasure
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__usdLiquidityParameter
  fpmm__lastActiveDay
  fpmm__lastActiveHour
  fpmm__runningDailyVolume
  fpmm__scaledRunningDailyVolume
  fpmm__usdRunningDailyVolume
  fpmm__lastActiveDayAndRunningDailyVolume
  fpmm__lastActiveDayAndScaledRunningDailyVolume
  fpmm__sort24HourVolume0
  fpmm__sort24HourVolume1
  fpmm__sort24HourVolume2
  fpmm__sort24HourVolume3
  fpmm__sort24HourVolume4
  fpmm__sort24HourVolume5
  fpmm__sort24HourVolume6
  fpmm__sort24HourVolume7
  fpmm__sort24HourVolume8
  fpmm__sort24HourVolume9
  fpmm__sort24HourVolume10
  fpmm__sort24HourVolume11
  fpmm__sort24HourVolume12
  fpmm__sort24HourVolume13
  fpmm__sort24HourVolume14
  fpmm__sort24HourVolume15
  fpmm__sort24HourVolume16
  fpmm__sort24HourVolume17
  fpmm__sort24HourVolume18
  fpmm__sort24HourVolume19
  fpmm__sort24HourVolume20
  fpmm__sort24HourVolume21
  fpmm__sort24HourVolume22
  fpmm__sort24HourVolume23
  fpmm__indexedOnQuestion
  fpmm__curatedByDxDao
  fpmm__scalarLow
  fpmm__scalarHigh
  fpmm__templateId
  fpmm__data
  fpmm__title
  fpmm__category
  fpmm__language
  fpmm__arbitrator
  fpmm__openingTimestamp
  fpmm__timeout
  fpmm__resolutionTimestamp
  fpmm__currentAnswer
  fpmm__currentAnswerBond
  fpmm__currentAnswerTimestamp
  fpmm__isPendingArbitration
  fpmm__arbitrationOccurred
  fpmm__answerFinalizedTimestamp
  fpmm__klerosTCRregistered
  fpmm__curatedByDxDaoOrKleros
  type
  outcomeTokenAmounts
  collateralTokenAmount
  additionalLiquidityParameter
  funder
  funder__id
  funder__tradeNonce
  sharesAmount
  collateralRemovedFromFeePool
  creationTimestamp
  transactionHash
  additionalSharesCost
}

type FpmmParticipation {
  id: ID!
  fpmm: FixedProductMarketMaker!
  participant: Account!
  creationTimestamp: BigInt!
  collateralToken: Bytes!
  fee: BigInt!
  title: String
  category: String
  language: String
  arbitrator: Bytes
  openingTimestamp: BigInt
  timeout: BigInt
}

input FpmmParticipation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  participant: String
  participant_not: String
  participant_gt: String
  participant_lt: String
  participant_gte: String
  participant_lte: String
  participant_in: [String!]
  participant_not_in: [String!]
  participant_contains: String
  participant_contains_nocase: String
  participant_not_contains: String
  participant_not_contains_nocase: String
  participant_starts_with: String
  participant_starts_with_nocase: String
  participant_not_starts_with: String
  participant_not_starts_with_nocase: String
  participant_ends_with: String
  participant_ends_with_nocase: String
  participant_not_ends_with: String
  participant_not_ends_with_nocase: String
  participant_: Account_filter
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  category: String
  category_not: String
  category_gt: String
  category_lt: String
  category_gte: String
  category_lte: String
  category_in: [String!]
  category_not_in: [String!]
  category_contains: String
  category_contains_nocase: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  language: String
  language_not: String
  language_gt: String
  language_lt: String
  language_gte: String
  language_lte: String
  language_in: [String!]
  language_not_in: [String!]
  language_contains: String
  language_contains_nocase: String
  language_not_contains: String
  language_not_contains_nocase: String
  language_starts_with: String
  language_starts_with_nocase: String
  language_not_starts_with: String
  language_not_starts_with_nocase: String
  language_ends_with: String
  language_ends_with_nocase: String
  language_not_ends_with: String
  language_not_ends_with_nocase: String
  arbitrator: Bytes
  arbitrator_not: Bytes
  arbitrator_gt: Bytes
  arbitrator_lt: Bytes
  arbitrator_gte: Bytes
  arbitrator_lte: Bytes
  arbitrator_in: [Bytes!]
  arbitrator_not_in: [Bytes!]
  arbitrator_contains: Bytes
  arbitrator_not_contains: Bytes
  openingTimestamp: BigInt
  openingTimestamp_not: BigInt
  openingTimestamp_gt: BigInt
  openingTimestamp_lt: BigInt
  openingTimestamp_gte: BigInt
  openingTimestamp_lte: BigInt
  openingTimestamp_in: [BigInt!]
  openingTimestamp_not_in: [BigInt!]
  timeout: BigInt
  timeout_not: BigInt
  timeout_gt: BigInt
  timeout_lt: BigInt
  timeout_gte: BigInt
  timeout_lte: BigInt
  timeout_in: [BigInt!]
  timeout_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmParticipation_filter]
  or: [FpmmParticipation_filter]
}

enum FpmmParticipation_orderBy {
  id
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__collateralToken
  fpmm__fee
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__usdVolume
  fpmm__outcomeSlotCount
  fpmm__liquidityMeasure
  fpmm__scaledLiquidityMeasure
  fpmm__usdLiquidityMeasure
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__usdLiquidityParameter
  fpmm__lastActiveDay
  fpmm__lastActiveHour
  fpmm__runningDailyVolume
  fpmm__scaledRunningDailyVolume
  fpmm__usdRunningDailyVolume
  fpmm__lastActiveDayAndRunningDailyVolume
  fpmm__lastActiveDayAndScaledRunningDailyVolume
  fpmm__sort24HourVolume0
  fpmm__sort24HourVolume1
  fpmm__sort24HourVolume2
  fpmm__sort24HourVolume3
  fpmm__sort24HourVolume4
  fpmm__sort24HourVolume5
  fpmm__sort24HourVolume6
  fpmm__sort24HourVolume7
  fpmm__sort24HourVolume8
  fpmm__sort24HourVolume9
  fpmm__sort24HourVolume10
  fpmm__sort24HourVolume11
  fpmm__sort24HourVolume12
  fpmm__sort24HourVolume13
  fpmm__sort24HourVolume14
  fpmm__sort24HourVolume15
  fpmm__sort24HourVolume16
  fpmm__sort24HourVolume17
  fpmm__sort24HourVolume18
  fpmm__sort24HourVolume19
  fpmm__sort24HourVolume20
  fpmm__sort24HourVolume21
  fpmm__sort24HourVolume22
  fpmm__sort24HourVolume23
  fpmm__indexedOnQuestion
  fpmm__curatedByDxDao
  fpmm__scalarLow
  fpmm__scalarHigh
  fpmm__templateId
  fpmm__data
  fpmm__title
  fpmm__category
  fpmm__language
  fpmm__arbitrator
  fpmm__openingTimestamp
  fpmm__timeout
  fpmm__resolutionTimestamp
  fpmm__currentAnswer
  fpmm__currentAnswerBond
  fpmm__currentAnswerTimestamp
  fpmm__isPendingArbitration
  fpmm__arbitrationOccurred
  fpmm__answerFinalizedTimestamp
  fpmm__klerosTCRregistered
  fpmm__curatedByDxDaoOrKleros
  participant
  participant__id
  participant__tradeNonce
  creationTimestamp
  collateralToken
  fee
  title
  category
  language
  arbitrator
  openingTimestamp
  timeout
}

type FpmmPoolMembership {
  id: ID!
  pool: FixedProductMarketMaker!
  funder: Account!
  amount: BigInt!
}

input FpmmPoolMembership_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: FixedProductMarketMaker_filter
  funder: String
  funder_not: String
  funder_gt: String
  funder_lt: String
  funder_gte: String
  funder_lte: String
  funder_in: [String!]
  funder_not_in: [String!]
  funder_contains: String
  funder_contains_nocase: String
  funder_not_contains: String
  funder_not_contains_nocase: String
  funder_starts_with: String
  funder_starts_with_nocase: String
  funder_not_starts_with: String
  funder_not_starts_with_nocase: String
  funder_ends_with: String
  funder_ends_with_nocase: String
  funder_not_ends_with: String
  funder_not_ends_with_nocase: String
  funder_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmPoolMembership_filter]
  or: [FpmmPoolMembership_filter]
}

enum FpmmPoolMembership_orderBy {
  id
  pool
  pool__id
  pool__creator
  pool__creationTimestamp
  pool__collateralToken
  pool__fee
  pool__collateralVolume
  pool__scaledCollateralVolume
  pool__usdVolume
  pool__outcomeSlotCount
  pool__liquidityMeasure
  pool__scaledLiquidityMeasure
  pool__usdLiquidityMeasure
  pool__liquidityParameter
  pool__scaledLiquidityParameter
  pool__usdLiquidityParameter
  pool__lastActiveDay
  pool__lastActiveHour
  pool__runningDailyVolume
  pool__scaledRunningDailyVolume
  pool__usdRunningDailyVolume
  pool__lastActiveDayAndRunningDailyVolume
  pool__lastActiveDayAndScaledRunningDailyVolume
  pool__sort24HourVolume0
  pool__sort24HourVolume1
  pool__sort24HourVolume2
  pool__sort24HourVolume3
  pool__sort24HourVolume4
  pool__sort24HourVolume5
  pool__sort24HourVolume6
  pool__sort24HourVolume7
  pool__sort24HourVolume8
  pool__sort24HourVolume9
  pool__sort24HourVolume10
  pool__sort24HourVolume11
  pool__sort24HourVolume12
  pool__sort24HourVolume13
  pool__sort24HourVolume14
  pool__sort24HourVolume15
  pool__sort24HourVolume16
  pool__sort24HourVolume17
  pool__sort24HourVolume18
  pool__sort24HourVolume19
  pool__sort24HourVolume20
  pool__sort24HourVolume21
  pool__sort24HourVolume22
  pool__sort24HourVolume23
  pool__indexedOnQuestion
  pool__curatedByDxDao
  pool__scalarLow
  pool__scalarHigh
  pool__templateId
  pool__data
  pool__title
  pool__category
  pool__language
  pool__arbitrator
  pool__openingTimestamp
  pool__timeout
  pool__resolutionTimestamp
  pool__currentAnswer
  pool__currentAnswerBond
  pool__currentAnswerTimestamp
  pool__isPendingArbitration
  pool__arbitrationOccurred
  pool__answerFinalizedTimestamp
  pool__klerosTCRregistered
  pool__curatedByDxDaoOrKleros
  funder
  funder__id
  funder__tradeNonce
  amount
}

type FpmmTrade {
  id: ID!
  fpmm: FixedProductMarketMaker!
  title: String
  collateralToken: Bytes!
  outcomeTokenMarginalPrice: BigDecimal!
  oldOutcomeTokenMarginalPrice: BigDecimal!
  type: TradeType!
  creator: Account!
  creationTimestamp: BigInt!
  collateralAmount: BigInt!
  collateralAmountUSD: BigDecimal!
  feeAmount: BigInt!
  outcomeIndex: BigInt!
  outcomeTokensTraded: BigInt!
  transactionHash: Bytes!
}

input FpmmTrade_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  collateralToken: Bytes
  collateralToken_not: Bytes
  collateralToken_gt: Bytes
  collateralToken_lt: Bytes
  collateralToken_gte: Bytes
  collateralToken_lte: Bytes
  collateralToken_in: [Bytes!]
  collateralToken_not_in: [Bytes!]
  collateralToken_contains: Bytes
  collateralToken_not_contains: Bytes
  outcomeTokenMarginalPrice: BigDecimal
  outcomeTokenMarginalPrice_not: BigDecimal
  outcomeTokenMarginalPrice_gt: BigDecimal
  outcomeTokenMarginalPrice_lt: BigDecimal
  outcomeTokenMarginalPrice_gte: BigDecimal
  outcomeTokenMarginalPrice_lte: BigDecimal
  outcomeTokenMarginalPrice_in: [BigDecimal!]
  outcomeTokenMarginalPrice_not_in: [BigDecimal!]
  oldOutcomeTokenMarginalPrice: BigDecimal
  oldOutcomeTokenMarginalPrice_not: BigDecimal
  oldOutcomeTokenMarginalPrice_gt: BigDecimal
  oldOutcomeTokenMarginalPrice_lt: BigDecimal
  oldOutcomeTokenMarginalPrice_gte: BigDecimal
  oldOutcomeTokenMarginalPrice_lte: BigDecimal
  oldOutcomeTokenMarginalPrice_in: [BigDecimal!]
  oldOutcomeTokenMarginalPrice_not_in: [BigDecimal!]
  type: TradeType
  type_not: TradeType
  type_in: [TradeType!]
  type_not_in: [TradeType!]
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: Account_filter
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  collateralAmount: BigInt
  collateralAmount_not: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_lt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_not_in: [BigInt!]
  collateralAmountUSD: BigDecimal
  collateralAmountUSD_not: BigDecimal
  collateralAmountUSD_gt: BigDecimal
  collateralAmountUSD_lt: BigDecimal
  collateralAmountUSD_gte: BigDecimal
  collateralAmountUSD_lte: BigDecimal
  collateralAmountUSD_in: [BigDecimal!]
  collateralAmountUSD_not_in: [BigDecimal!]
  feeAmount: BigInt
  feeAmount_not: BigInt
  feeAmount_gt: BigInt
  feeAmount_lt: BigInt
  feeAmount_gte: BigInt
  feeAmount_lte: BigInt
  feeAmount_in: [BigInt!]
  feeAmount_not_in: [BigInt!]
  outcomeIndex: BigInt
  outcomeIndex_not: BigInt
  outcomeIndex_gt: BigInt
  outcomeIndex_lt: BigInt
  outcomeIndex_gte: BigInt
  outcomeIndex_lte: BigInt
  outcomeIndex_in: [BigInt!]
  outcomeIndex_not_in: [BigInt!]
  outcomeTokensTraded: BigInt
  outcomeTokensTraded_not: BigInt
  outcomeTokensTraded_gt: BigInt
  outcomeTokensTraded_lt: BigInt
  outcomeTokensTraded_gte: BigInt
  outcomeTokensTraded_lte: BigInt
  outcomeTokensTraded_in: [BigInt!]
  outcomeTokensTraded_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmTrade_filter]
  or: [FpmmTrade_filter]
}

enum FpmmTrade_orderBy {
  id
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__collateralToken
  fpmm__fee
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__usdVolume
  fpmm__outcomeSlotCount
  fpmm__liquidityMeasure
  fpmm__scaledLiquidityMeasure
  fpmm__usdLiquidityMeasure
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__usdLiquidityParameter
  fpmm__lastActiveDay
  fpmm__lastActiveHour
  fpmm__runningDailyVolume
  fpmm__scaledRunningDailyVolume
  fpmm__usdRunningDailyVolume
  fpmm__lastActiveDayAndRunningDailyVolume
  fpmm__lastActiveDayAndScaledRunningDailyVolume
  fpmm__sort24HourVolume0
  fpmm__sort24HourVolume1
  fpmm__sort24HourVolume2
  fpmm__sort24HourVolume3
  fpmm__sort24HourVolume4
  fpmm__sort24HourVolume5
  fpmm__sort24HourVolume6
  fpmm__sort24HourVolume7
  fpmm__sort24HourVolume8
  fpmm__sort24HourVolume9
  fpmm__sort24HourVolume10
  fpmm__sort24HourVolume11
  fpmm__sort24HourVolume12
  fpmm__sort24HourVolume13
  fpmm__sort24HourVolume14
  fpmm__sort24HourVolume15
  fpmm__sort24HourVolume16
  fpmm__sort24HourVolume17
  fpmm__sort24HourVolume18
  fpmm__sort24HourVolume19
  fpmm__sort24HourVolume20
  fpmm__sort24HourVolume21
  fpmm__sort24HourVolume22
  fpmm__sort24HourVolume23
  fpmm__indexedOnQuestion
  fpmm__curatedByDxDao
  fpmm__scalarLow
  fpmm__scalarHigh
  fpmm__templateId
  fpmm__data
  fpmm__title
  fpmm__category
  fpmm__language
  fpmm__arbitrator
  fpmm__openingTimestamp
  fpmm__timeout
  fpmm__resolutionTimestamp
  fpmm__currentAnswer
  fpmm__currentAnswerBond
  fpmm__currentAnswerTimestamp
  fpmm__isPendingArbitration
  fpmm__arbitrationOccurred
  fpmm__answerFinalizedTimestamp
  fpmm__klerosTCRregistered
  fpmm__curatedByDxDaoOrKleros
  title
  collateralToken
  outcomeTokenMarginalPrice
  oldOutcomeTokenMarginalPrice
  type
  creator
  creator__id
  creator__tradeNonce
  creationTimestamp
  collateralAmount
  collateralAmountUSD
  feeAmount
  outcomeIndex
  outcomeTokensTraded
  transactionHash
}

type FpmmTransaction {
  id: ID!
  fpmm: FixedProductMarketMaker!
  user: Account!
  fpmmType: FpmmType!
  transactionType: TransactionType!
  collateralTokenAmount: BigInt!
  sharesOrPoolTokenAmount: BigInt!
  creationTimestamp: BigInt!
  transactionHash: Bytes!
  additionalSharesCost: BigInt
}

input FpmmTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: Account_filter
  fpmmType: FpmmType
  fpmmType_not: FpmmType
  fpmmType_in: [FpmmType!]
  fpmmType_not_in: [FpmmType!]
  transactionType: TransactionType
  transactionType_not: TransactionType
  transactionType_in: [TransactionType!]
  transactionType_not_in: [TransactionType!]
  collateralTokenAmount: BigInt
  collateralTokenAmount_not: BigInt
  collateralTokenAmount_gt: BigInt
  collateralTokenAmount_lt: BigInt
  collateralTokenAmount_gte: BigInt
  collateralTokenAmount_lte: BigInt
  collateralTokenAmount_in: [BigInt!]
  collateralTokenAmount_not_in: [BigInt!]
  sharesOrPoolTokenAmount: BigInt
  sharesOrPoolTokenAmount_not: BigInt
  sharesOrPoolTokenAmount_gt: BigInt
  sharesOrPoolTokenAmount_lt: BigInt
  sharesOrPoolTokenAmount_gte: BigInt
  sharesOrPoolTokenAmount_lte: BigInt
  sharesOrPoolTokenAmount_in: [BigInt!]
  sharesOrPoolTokenAmount_not_in: [BigInt!]
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  additionalSharesCost: BigInt
  additionalSharesCost_not: BigInt
  additionalSharesCost_gt: BigInt
  additionalSharesCost_lt: BigInt
  additionalSharesCost_gte: BigInt
  additionalSharesCost_lte: BigInt
  additionalSharesCost_in: [BigInt!]
  additionalSharesCost_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmTransaction_filter]
  or: [FpmmTransaction_filter]
}

enum FpmmTransaction_orderBy {
  id
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__collateralToken
  fpmm__fee
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__usdVolume
  fpmm__outcomeSlotCount
  fpmm__liquidityMeasure
  fpmm__scaledLiquidityMeasure
  fpmm__usdLiquidityMeasure
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__usdLiquidityParameter
  fpmm__lastActiveDay
  fpmm__lastActiveHour
  fpmm__runningDailyVolume
  fpmm__scaledRunningDailyVolume
  fpmm__usdRunningDailyVolume
  fpmm__lastActiveDayAndRunningDailyVolume
  fpmm__lastActiveDayAndScaledRunningDailyVolume
  fpmm__sort24HourVolume0
  fpmm__sort24HourVolume1
  fpmm__sort24HourVolume2
  fpmm__sort24HourVolume3
  fpmm__sort24HourVolume4
  fpmm__sort24HourVolume5
  fpmm__sort24HourVolume6
  fpmm__sort24HourVolume7
  fpmm__sort24HourVolume8
  fpmm__sort24HourVolume9
  fpmm__sort24HourVolume10
  fpmm__sort24HourVolume11
  fpmm__sort24HourVolume12
  fpmm__sort24HourVolume13
  fpmm__sort24HourVolume14
  fpmm__sort24HourVolume15
  fpmm__sort24HourVolume16
  fpmm__sort24HourVolume17
  fpmm__sort24HourVolume18
  fpmm__sort24HourVolume19
  fpmm__sort24HourVolume20
  fpmm__sort24HourVolume21
  fpmm__sort24HourVolume22
  fpmm__sort24HourVolume23
  fpmm__indexedOnQuestion
  fpmm__curatedByDxDao
  fpmm__scalarLow
  fpmm__scalarHigh
  fpmm__templateId
  fpmm__data
  fpmm__title
  fpmm__category
  fpmm__language
  fpmm__arbitrator
  fpmm__openingTimestamp
  fpmm__timeout
  fpmm__resolutionTimestamp
  fpmm__currentAnswer
  fpmm__currentAnswerBond
  fpmm__currentAnswerTimestamp
  fpmm__isPendingArbitration
  fpmm__arbitrationOccurred
  fpmm__answerFinalizedTimestamp
  fpmm__klerosTCRregistered
  fpmm__curatedByDxDaoOrKleros
  user
  user__id
  user__tradeNonce
  fpmmType
  transactionType
  collateralTokenAmount
  sharesOrPoolTokenAmount
  creationTimestamp
  transactionHash
  additionalSharesCost
}

enum FpmmType {
  Trade
  Liquidity
}

type GelatoUser {
  id: ID!
  address: Bytes!
  signUpDate: BigInt!
  executor: Bytes
}

input GelatoUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  signUpDate: BigInt
  signUpDate_not: BigInt
  signUpDate_gt: BigInt
  signUpDate_lt: BigInt
  signUpDate_gte: BigInt
  signUpDate_lte: BigInt
  signUpDate_in: [BigInt!]
  signUpDate_not_in: [BigInt!]
  executor: Bytes
  executor_not: Bytes
  executor_gt: Bytes
  executor_lt: Bytes
  executor_gte: Bytes
  executor_lte: Bytes
  executor_in: [Bytes!]
  executor_not_in: [Bytes!]
  executor_contains: Bytes
  executor_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GelatoUser_filter]
  or: [GelatoUser_filter]
}

enum GelatoUser_orderBy {
  id
  address
  signUpDate
  executor
}

type Global {
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
  usdPerEth: BigDecimal
  usdVolume: BigDecimal!
}

input Global_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  numConditions: Int
  numConditions_not: Int
  numConditions_gt: Int
  numConditions_lt: Int
  numConditions_gte: Int
  numConditions_lte: Int
  numConditions_in: [Int!]
  numConditions_not_in: [Int!]
  numOpenConditions: Int
  numOpenConditions_not: Int
  numOpenConditions_gt: Int
  numOpenConditions_lt: Int
  numOpenConditions_gte: Int
  numOpenConditions_lte: Int
  numOpenConditions_in: [Int!]
  numOpenConditions_not_in: [Int!]
  numClosedConditions: Int
  numClosedConditions_not: Int
  numClosedConditions_gt: Int
  numClosedConditions_lt: Int
  numClosedConditions_gte: Int
  numClosedConditions_lte: Int
  numClosedConditions_in: [Int!]
  numClosedConditions_not_in: [Int!]
  usdPerEth: BigDecimal
  usdPerEth_not: BigDecimal
  usdPerEth_gt: BigDecimal
  usdPerEth_lt: BigDecimal
  usdPerEth_gte: BigDecimal
  usdPerEth_lte: BigDecimal
  usdPerEth_in: [BigDecimal!]
  usdPerEth_not_in: [BigDecimal!]
  usdVolume: BigDecimal
  usdVolume_not: BigDecimal
  usdVolume_gt: BigDecimal
  usdVolume_lt: BigDecimal
  usdVolume_gte: BigDecimal
  usdVolume_lte: BigDecimal
  usdVolume_in: [BigDecimal!]
  usdVolume_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Global_filter]
  or: [Global_filter]
}

enum Global_orderBy {
  id
  numConditions
  numOpenConditions
  numClosedConditions
  usdPerEth
  usdVolume
}

"""
8 bytes signed integer

"""
scalar Int8

enum KlerosStatus {
  """
  The item is not registered on the TCR and there are no pending requests.
  """
  Absent
  """The item is registered and there are no pending requests."""
  Registered
  """
  The item is not registered on the TCR, but there is a pending registration request.
  """
  RegistrationRequested
  """
  The item is registered on the TCR, but there is a pending removal request. These are sometimes also called removal requests.
  """
  ClearingRequested
}

type KlerosSubmission {
  id: ID!
  status: KlerosStatus!
  listAddress: String!
  market: FixedProductMarketMaker!
}

input KlerosSubmission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: KlerosStatus
  status_not: KlerosStatus
  status_in: [KlerosStatus!]
  status_not_in: [KlerosStatus!]
  listAddress: String
  listAddress_not: String
  listAddress_gt: String
  listAddress_lt: String
  listAddress_gte: String
  listAddress_lte: String
  listAddress_in: [String!]
  listAddress_not_in: [String!]
  listAddress_contains: String
  listAddress_contains_nocase: String
  listAddress_not_contains: String
  listAddress_not_contains_nocase: String
  listAddress_starts_with: String
  listAddress_starts_with_nocase: String
  listAddress_not_starts_with: String
  listAddress_not_starts_with_nocase: String
  listAddress_ends_with: String
  listAddress_ends_with_nocase: String
  listAddress_not_ends_with: String
  listAddress_not_ends_with_nocase: String
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: FixedProductMarketMaker_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [KlerosSubmission_filter]
  or: [KlerosSubmission_filter]
}

enum KlerosSubmission_orderBy {
  id
  status
  listAddress
  market
  market__id
  market__creator
  market__creationTimestamp
  market__collateralToken
  market__fee
  market__collateralVolume
  market__scaledCollateralVolume
  market__usdVolume
  market__outcomeSlotCount
  market__liquidityMeasure
  market__scaledLiquidityMeasure
  market__usdLiquidityMeasure
  market__liquidityParameter
  market__scaledLiquidityParameter
  market__usdLiquidityParameter
  market__lastActiveDay
  market__lastActiveHour
  market__runningDailyVolume
  market__scaledRunningDailyVolume
  market__usdRunningDailyVolume
  market__lastActiveDayAndRunningDailyVolume
  market__lastActiveDayAndScaledRunningDailyVolume
  market__sort24HourVolume0
  market__sort24HourVolume1
  market__sort24HourVolume2
  market__sort24HourVolume3
  market__sort24HourVolume4
  market__sort24HourVolume5
  market__sort24HourVolume6
  market__sort24HourVolume7
  market__sort24HourVolume8
  market__sort24HourVolume9
  market__sort24HourVolume10
  market__sort24HourVolume11
  market__sort24HourVolume12
  market__sort24HourVolume13
  market__sort24HourVolume14
  market__sort24HourVolume15
  market__sort24HourVolume16
  market__sort24HourVolume17
  market__sort24HourVolume18
  market__sort24HourVolume19
  market__sort24HourVolume20
  market__sort24HourVolume21
  market__sort24HourVolume22
  market__sort24HourVolume23
  market__indexedOnQuestion
  market__curatedByDxDao
  market__scalarLow
  market__scalarHigh
  market__templateId
  market__data
  market__title
  market__category
  market__language
  market__arbitrator
  market__openingTimestamp
  market__timeout
  market__resolutionTimestamp
  market__currentAnswer
  market__currentAnswerBond
  market__currentAnswerTimestamp
  market__isPendingArbitration
  market__arbitrationOccurred
  market__answerFinalizedTimestamp
  market__klerosTCRregistered
  market__curatedByDxDaoOrKleros
}

enum LiquidityType {
  Add
  Remove
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Provider {
  id: ID!
  addr: Bytes!
  module: Bytes!
  taskCount: BigInt!
}

input Provider_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  addr: Bytes
  addr_not: Bytes
  addr_gt: Bytes
  addr_lt: Bytes
  addr_gte: Bytes
  addr_lte: Bytes
  addr_in: [Bytes!]
  addr_not_in: [Bytes!]
  addr_contains: Bytes
  addr_not_contains: Bytes
  module: Bytes
  module_not: Bytes
  module_gt: Bytes
  module_lt: Bytes
  module_gte: Bytes
  module_lte: Bytes
  module_in: [Bytes!]
  module_not_in: [Bytes!]
  module_contains: Bytes
  module_not_contains: Bytes
  taskCount: BigInt
  taskCount_not: BigInt
  taskCount_gt: BigInt
  taskCount_lt: BigInt
  taskCount_gte: BigInt
  taskCount_lte: BigInt
  taskCount_in: [BigInt!]
  taskCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Provider_filter]
  or: [Provider_filter]
}

enum Provider_orderBy {
  id
  addr
  module
  taskCount
}

type Query {
  question(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Question
  questions(
    skip: Int = 0
    first: Int = 100
    orderBy: Question_orderBy
    orderDirection: OrderDirection
    where: Question_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Question!]!
  answer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Answer
  answers(
    skip: Int = 0
    first: Int = 100
    orderBy: Answer_orderBy
    orderDirection: OrderDirection
    where: Answer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Answer!]!
  scalarQuestionLink(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ScalarQuestionLink
  scalarQuestionLinks(
    skip: Int = 0
    first: Int = 100
    orderBy: ScalarQuestionLink_orderBy
    orderDirection: OrderDirection
    where: ScalarQuestionLink_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ScalarQuestionLink!]!
  category(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Category
  categories(
    skip: Int = 0
    first: Int = 100
    orderBy: Category_orderBy
    orderDirection: OrderDirection
    where: Category_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Category!]!
  condition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  fixedProductMarketMaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FixedProductMarketMaker
  fixedProductMarketMakers(
    skip: Int = 0
    first: Int = 100
    orderBy: FixedProductMarketMaker_orderBy
    orderDirection: OrderDirection
    where: FixedProductMarketMaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FixedProductMarketMaker!]!
  fpmmPoolMembership(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmPoolMembership
  fpmmPoolMemberships(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmPoolMembership_orderBy
    orderDirection: OrderDirection
    where: FpmmPoolMembership_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmPoolMembership!]!
  fpmmParticipation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmParticipation
  fpmmParticipations(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmParticipation_orderBy
    orderDirection: OrderDirection
    where: FpmmParticipation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmParticipation!]!
  fpmmTrade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmTrade
  fpmmTrades(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmTrade_orderBy
    orderDirection: OrderDirection
    where: FpmmTrade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmTrade!]!
  fpmmLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmLiquidity
  fpmmLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmLiquidity_orderBy
    orderDirection: OrderDirection
    where: FpmmLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmLiquidity!]!
  fpmmTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmTransaction
  fpmmTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmTransaction_orderBy
    orderDirection: OrderDirection
    where: FpmmTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmTransaction!]!
  gelatoUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GelatoUser
  gelatoUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: GelatoUser_orderBy
    orderDirection: OrderDirection
    where: GelatoUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GelatoUser!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  provider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Provider
  providers(
    skip: Int = 0
    first: Int = 100
    orderBy: Provider_orderBy
    orderDirection: OrderDirection
    where: Provider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Provider!]!
  taskReceiptWrapper(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReceiptWrapper
  taskReceiptWrappers(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskReceiptWrapper_orderBy
    orderDirection: OrderDirection
    where: TaskReceiptWrapper_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskReceiptWrapper!]!
  taskCycle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCycle
  taskCycles(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCycle_orderBy
    orderDirection: OrderDirection
    where: TaskCycle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCycle!]!
  taskReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReceipt
  taskReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskReceipt_orderBy
    orderDirection: OrderDirection
    where: TaskReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskReceipt!]!
  taskCondition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCondition
  taskConditions(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCondition_orderBy
    orderDirection: OrderDirection
    where: TaskCondition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCondition!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  registeredToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisteredToken
  registeredTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisteredToken_orderBy
    orderDirection: OrderDirection
    where: RegisteredToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisteredToken!]!
  tokenList(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenList
  tokenLists(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenList_orderBy
    orderDirection: OrderDirection
    where: TokenList_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenList!]!
  uniswapPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapPair
  uniswapPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapPair_orderBy
    orderDirection: OrderDirection
    where: UniswapPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapPair!]!
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]!
  klerosSubmission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KlerosSubmission
  klerosSubmissions(
    skip: Int = 0
    first: Int = 100
    orderBy: KlerosSubmission_orderBy
    orderDirection: OrderDirection
    where: KlerosSubmission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KlerosSubmission!]!
  marketSearch(
    text: String!
    first: Int = 100
    skip: Int = 0
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: FixedProductMarketMaker_filter
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FixedProductMarketMaker!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Question {
  id: ID!
  templateId: BigInt!
  data: String!
  title: String
  outcomes: [String!]
  category: String
  language: String
  arbitrator: Bytes!
  openingTimestamp: BigInt!
  timeout: BigInt!
  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt
  isPendingArbitration: Boolean!
  arbitrationOccurred: Boolean!
  answerFinalizedTimestamp: BigInt
  indexedFixedProductMarketMakers(skip: Int = 0, first: Int = 100, orderBy: FixedProductMarketMaker_orderBy, orderDirection: OrderDirection, where: FixedProductMarketMaker_filter): [FixedProductMarketMaker!]!
  conditions(skip: Int = 0, first: Int = 100, orderBy: Condition_orderBy, orderDirection: OrderDirection, where: Condition_filter): [Condition!]!
  answers(skip: Int = 0, first: Int = 100, orderBy: Answer_orderBy, orderDirection: OrderDirection, where: Answer_filter): [Answer!]
}

input Question_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  templateId: BigInt
  templateId_not: BigInt
  templateId_gt: BigInt
  templateId_lt: BigInt
  templateId_gte: BigInt
  templateId_lte: BigInt
  templateId_in: [BigInt!]
  templateId_not_in: [BigInt!]
  data: String
  data_not: String
  data_gt: String
  data_lt: String
  data_gte: String
  data_lte: String
  data_in: [String!]
  data_not_in: [String!]
  data_contains: String
  data_contains_nocase: String
  data_not_contains: String
  data_not_contains_nocase: String
  data_starts_with: String
  data_starts_with_nocase: String
  data_not_starts_with: String
  data_not_starts_with_nocase: String
  data_ends_with: String
  data_ends_with_nocase: String
  data_not_ends_with: String
  data_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  outcomes: [String!]
  outcomes_not: [String!]
  outcomes_contains: [String!]
  outcomes_contains_nocase: [String!]
  outcomes_not_contains: [String!]
  outcomes_not_contains_nocase: [String!]
  category: String
  category_not: String
  category_gt: String
  category_lt: String
  category_gte: String
  category_lte: String
  category_in: [String!]
  category_not_in: [String!]
  category_contains: String
  category_contains_nocase: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  language: String
  language_not: String
  language_gt: String
  language_lt: String
  language_gte: String
  language_lte: String
  language_in: [String!]
  language_not_in: [String!]
  language_contains: String
  language_contains_nocase: String
  language_not_contains: String
  language_not_contains_nocase: String
  language_starts_with: String
  language_starts_with_nocase: String
  language_not_starts_with: String
  language_not_starts_with_nocase: String
  language_ends_with: String
  language_ends_with_nocase: String
  language_not_ends_with: String
  language_not_ends_with_nocase: String
  arbitrator: Bytes
  arbitrator_not: Bytes
  arbitrator_gt: Bytes
  arbitrator_lt: Bytes
  arbitrator_gte: Bytes
  arbitrator_lte: Bytes
  arbitrator_in: [Bytes!]
  arbitrator_not_in: [Bytes!]
  arbitrator_contains: Bytes
  arbitrator_not_contains: Bytes
  openingTimestamp: BigInt
  openingTimestamp_not: BigInt
  openingTimestamp_gt: BigInt
  openingTimestamp_lt: BigInt
  openingTimestamp_gte: BigInt
  openingTimestamp_lte: BigInt
  openingTimestamp_in: [BigInt!]
  openingTimestamp_not_in: [BigInt!]
  timeout: BigInt
  timeout_not: BigInt
  timeout_gt: BigInt
  timeout_lt: BigInt
  timeout_gte: BigInt
  timeout_lte: BigInt
  timeout_in: [BigInt!]
  timeout_not_in: [BigInt!]
  currentAnswer: Bytes
  currentAnswer_not: Bytes
  currentAnswer_gt: Bytes
  currentAnswer_lt: Bytes
  currentAnswer_gte: Bytes
  currentAnswer_lte: Bytes
  currentAnswer_in: [Bytes!]
  currentAnswer_not_in: [Bytes!]
  currentAnswer_contains: Bytes
  currentAnswer_not_contains: Bytes
  currentAnswerBond: BigInt
  currentAnswerBond_not: BigInt
  currentAnswerBond_gt: BigInt
  currentAnswerBond_lt: BigInt
  currentAnswerBond_gte: BigInt
  currentAnswerBond_lte: BigInt
  currentAnswerBond_in: [BigInt!]
  currentAnswerBond_not_in: [BigInt!]
  currentAnswerTimestamp: BigInt
  currentAnswerTimestamp_not: BigInt
  currentAnswerTimestamp_gt: BigInt
  currentAnswerTimestamp_lt: BigInt
  currentAnswerTimestamp_gte: BigInt
  currentAnswerTimestamp_lte: BigInt
  currentAnswerTimestamp_in: [BigInt!]
  currentAnswerTimestamp_not_in: [BigInt!]
  isPendingArbitration: Boolean
  isPendingArbitration_not: Boolean
  isPendingArbitration_in: [Boolean!]
  isPendingArbitration_not_in: [Boolean!]
  arbitrationOccurred: Boolean
  arbitrationOccurred_not: Boolean
  arbitrationOccurred_in: [Boolean!]
  arbitrationOccurred_not_in: [Boolean!]
  answerFinalizedTimestamp: BigInt
  answerFinalizedTimestamp_not: BigInt
  answerFinalizedTimestamp_gt: BigInt
  answerFinalizedTimestamp_lt: BigInt
  answerFinalizedTimestamp_gte: BigInt
  answerFinalizedTimestamp_lte: BigInt
  answerFinalizedTimestamp_in: [BigInt!]
  answerFinalizedTimestamp_not_in: [BigInt!]
  indexedFixedProductMarketMakers: [String!]
  indexedFixedProductMarketMakers_not: [String!]
  indexedFixedProductMarketMakers_contains: [String!]
  indexedFixedProductMarketMakers_contains_nocase: [String!]
  indexedFixedProductMarketMakers_not_contains: [String!]
  indexedFixedProductMarketMakers_not_contains_nocase: [String!]
  indexedFixedProductMarketMakers_: FixedProductMarketMaker_filter
  conditions_: Condition_filter
  answers_: Answer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Question_filter]
  or: [Question_filter]
}

enum Question_orderBy {
  id
  templateId
  data
  title
  outcomes
  category
  language
  arbitrator
  openingTimestamp
  timeout
  currentAnswer
  currentAnswerBond
  currentAnswerTimestamp
  isPendingArbitration
  arbitrationOccurred
  answerFinalizedTimestamp
  indexedFixedProductMarketMakers
  conditions
  answers
}

type RegisteredToken {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

input RegisteredToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegisteredToken_filter]
  or: [RegisteredToken_filter]
}

enum RegisteredToken_orderBy {
  id
  address
  decimals
  name
  symbol
}

type ScalarQuestionLink {
  id: ID!
  conditionQuestionId: Bytes!
  realityEthQuestionId: Bytes!
  question: Question
  scalarLow: BigInt!
  scalarHigh: BigInt!
}

input ScalarQuestionLink_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  conditionQuestionId: Bytes
  conditionQuestionId_not: Bytes
  conditionQuestionId_gt: Bytes
  conditionQuestionId_lt: Bytes
  conditionQuestionId_gte: Bytes
  conditionQuestionId_lte: Bytes
  conditionQuestionId_in: [Bytes!]
  conditionQuestionId_not_in: [Bytes!]
  conditionQuestionId_contains: Bytes
  conditionQuestionId_not_contains: Bytes
  realityEthQuestionId: Bytes
  realityEthQuestionId_not: Bytes
  realityEthQuestionId_gt: Bytes
  realityEthQuestionId_lt: Bytes
  realityEthQuestionId_gte: Bytes
  realityEthQuestionId_lte: Bytes
  realityEthQuestionId_in: [Bytes!]
  realityEthQuestionId_not_in: [Bytes!]
  realityEthQuestionId_contains: Bytes
  realityEthQuestionId_not_contains: Bytes
  question: String
  question_not: String
  question_gt: String
  question_lt: String
  question_gte: String
  question_lte: String
  question_in: [String!]
  question_not_in: [String!]
  question_contains: String
  question_contains_nocase: String
  question_not_contains: String
  question_not_contains_nocase: String
  question_starts_with: String
  question_starts_with_nocase: String
  question_not_starts_with: String
  question_not_starts_with_nocase: String
  question_ends_with: String
  question_ends_with_nocase: String
  question_not_ends_with: String
  question_not_ends_with_nocase: String
  question_: Question_filter
  scalarLow: BigInt
  scalarLow_not: BigInt
  scalarLow_gt: BigInt
  scalarLow_lt: BigInt
  scalarLow_gte: BigInt
  scalarLow_lte: BigInt
  scalarLow_in: [BigInt!]
  scalarLow_not_in: [BigInt!]
  scalarHigh: BigInt
  scalarHigh_not: BigInt
  scalarHigh_gt: BigInt
  scalarHigh_lt: BigInt
  scalarHigh_gte: BigInt
  scalarHigh_lte: BigInt
  scalarHigh_in: [BigInt!]
  scalarHigh_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ScalarQuestionLink_filter]
  or: [ScalarQuestionLink_filter]
}

enum ScalarQuestionLink_orderBy {
  id
  conditionQuestionId
  realityEthQuestionId
  question
  question__id
  question__templateId
  question__data
  question__title
  question__category
  question__language
  question__arbitrator
  question__openingTimestamp
  question__timeout
  question__currentAnswer
  question__currentAnswerBond
  question__currentAnswerTimestamp
  question__isPendingArbitration
  question__arbitrationOccurred
  question__answerFinalizedTimestamp
  scalarLow
  scalarHigh
}

type Subscription {
  question(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Question
  questions(
    skip: Int = 0
    first: Int = 100
    orderBy: Question_orderBy
    orderDirection: OrderDirection
    where: Question_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Question!]!
  answer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Answer
  answers(
    skip: Int = 0
    first: Int = 100
    orderBy: Answer_orderBy
    orderDirection: OrderDirection
    where: Answer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Answer!]!
  scalarQuestionLink(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ScalarQuestionLink
  scalarQuestionLinks(
    skip: Int = 0
    first: Int = 100
    orderBy: ScalarQuestionLink_orderBy
    orderDirection: OrderDirection
    where: ScalarQuestionLink_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ScalarQuestionLink!]!
  category(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Category
  categories(
    skip: Int = 0
    first: Int = 100
    orderBy: Category_orderBy
    orderDirection: OrderDirection
    where: Category_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Category!]!
  condition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  fixedProductMarketMaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FixedProductMarketMaker
  fixedProductMarketMakers(
    skip: Int = 0
    first: Int = 100
    orderBy: FixedProductMarketMaker_orderBy
    orderDirection: OrderDirection
    where: FixedProductMarketMaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FixedProductMarketMaker!]!
  fpmmPoolMembership(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmPoolMembership
  fpmmPoolMemberships(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmPoolMembership_orderBy
    orderDirection: OrderDirection
    where: FpmmPoolMembership_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmPoolMembership!]!
  fpmmParticipation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmParticipation
  fpmmParticipations(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmParticipation_orderBy
    orderDirection: OrderDirection
    where: FpmmParticipation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmParticipation!]!
  fpmmTrade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmTrade
  fpmmTrades(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmTrade_orderBy
    orderDirection: OrderDirection
    where: FpmmTrade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmTrade!]!
  fpmmLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmLiquidity
  fpmmLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmLiquidity_orderBy
    orderDirection: OrderDirection
    where: FpmmLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmLiquidity!]!
  fpmmTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmTransaction
  fpmmTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmTransaction_orderBy
    orderDirection: OrderDirection
    where: FpmmTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmTransaction!]!
  gelatoUser(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GelatoUser
  gelatoUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: GelatoUser_orderBy
    orderDirection: OrderDirection
    where: GelatoUser_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GelatoUser!]!
  task(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  tasks(
    skip: Int = 0
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    where: Task_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Task!]!
  provider(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Provider
  providers(
    skip: Int = 0
    first: Int = 100
    orderBy: Provider_orderBy
    orderDirection: OrderDirection
    where: Provider_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Provider!]!
  taskReceiptWrapper(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReceiptWrapper
  taskReceiptWrappers(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskReceiptWrapper_orderBy
    orderDirection: OrderDirection
    where: TaskReceiptWrapper_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskReceiptWrapper!]!
  taskCycle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCycle
  taskCycles(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCycle_orderBy
    orderDirection: OrderDirection
    where: TaskCycle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCycle!]!
  taskReceipt(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReceipt
  taskReceipts(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskReceipt_orderBy
    orderDirection: OrderDirection
    where: TaskReceipt_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskReceipt!]!
  taskCondition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskCondition
  taskConditions(
    skip: Int = 0
    first: Int = 100
    orderBy: TaskCondition_orderBy
    orderDirection: OrderDirection
    where: TaskCondition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TaskCondition!]!
  action(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(
    skip: Int = 0
    first: Int = 100
    orderBy: Action_orderBy
    orderDirection: OrderDirection
    where: Action_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  registeredToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisteredToken
  registeredTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisteredToken_orderBy
    orderDirection: OrderDirection
    where: RegisteredToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisteredToken!]!
  tokenList(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenList
  tokenLists(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenList_orderBy
    orderDirection: OrderDirection
    where: TokenList_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenList!]!
  uniswapPair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UniswapPair
  uniswapPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: UniswapPair_orderBy
    orderDirection: OrderDirection
    where: UniswapPair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UniswapPair!]!
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]!
  klerosSubmission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): KlerosSubmission
  klerosSubmissions(
    skip: Int = 0
    first: Int = 100
    orderBy: KlerosSubmission_orderBy
    orderDirection: OrderDirection
    where: KlerosSubmission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [KlerosSubmission!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Task {
  id: ID!
  conditions(skip: Int = 0, first: Int = 100, orderBy: TaskCondition_orderBy, orderDirection: OrderDirection, where: TaskCondition_filter): [TaskCondition!]
  actions(skip: Int = 0, first: Int = 100, orderBy: Action_orderBy, orderDirection: OrderDirection, where: Action_filter): [Action!]
  selfProviderGasLimit: BigInt!
  selfProviderGasPriceCeil: BigInt!
}

type TaskCondition {
  id: ID!
  inst: Bytes!
  data: Bytes!
}

input TaskCondition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  inst: Bytes
  inst_not: Bytes
  inst_gt: Bytes
  inst_lt: Bytes
  inst_gte: Bytes
  inst_lte: Bytes
  inst_in: [Bytes!]
  inst_not_in: [Bytes!]
  inst_contains: Bytes
  inst_not_contains: Bytes
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskCondition_filter]
  or: [TaskCondition_filter]
}

enum TaskCondition_orderBy {
  id
  inst
  data
}

type TaskCycle {
  id: ID!
  taskReceiptWrappers(skip: Int = 0, first: Int = 100, orderBy: TaskReceiptWrapper_orderBy, orderDirection: OrderDirection, where: TaskReceiptWrapper_filter): [TaskReceiptWrapper!]!
}

input TaskCycle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  taskReceiptWrappers: [String!]
  taskReceiptWrappers_not: [String!]
  taskReceiptWrappers_contains: [String!]
  taskReceiptWrappers_contains_nocase: [String!]
  taskReceiptWrappers_not_contains: [String!]
  taskReceiptWrappers_not_contains_nocase: [String!]
  taskReceiptWrappers_: TaskReceiptWrapper_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskCycle_filter]
  or: [TaskCycle_filter]
}

enum TaskCycle_orderBy {
  id
  taskReceiptWrappers
}

type TaskReceipt {
  id: ID!
  userProxy: Bytes!
  provider: Provider!
  index: BigInt!
  tasks(skip: Int = 0, first: Int = 100, orderBy: Task_orderBy, orderDirection: OrderDirection, where: Task_filter): [Task!]
  expiryDate: BigInt!
  cycleId: BigInt!
  submissionsLeft: BigInt!
}

enum TaskReceiptStatus {
  awaitingExec
  execSuccess
  execReverted
  canceled
  expired
}

type TaskReceiptWrapper {
  id: ID!
  user: GelatoUser!
  taskReceipt: TaskReceipt!
  submissionHash: Bytes!
  status: TaskReceiptStatus!
  submissionDate: BigInt!
  selectedExecutor: Bytes!
  executionDate: BigInt
  executionHash: Bytes
  selfProvided: Boolean!
}

input TaskReceiptWrapper_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: GelatoUser_filter
  taskReceipt: String
  taskReceipt_not: String
  taskReceipt_gt: String
  taskReceipt_lt: String
  taskReceipt_gte: String
  taskReceipt_lte: String
  taskReceipt_in: [String!]
  taskReceipt_not_in: [String!]
  taskReceipt_contains: String
  taskReceipt_contains_nocase: String
  taskReceipt_not_contains: String
  taskReceipt_not_contains_nocase: String
  taskReceipt_starts_with: String
  taskReceipt_starts_with_nocase: String
  taskReceipt_not_starts_with: String
  taskReceipt_not_starts_with_nocase: String
  taskReceipt_ends_with: String
  taskReceipt_ends_with_nocase: String
  taskReceipt_not_ends_with: String
  taskReceipt_not_ends_with_nocase: String
  taskReceipt_: TaskReceipt_filter
  submissionHash: Bytes
  submissionHash_not: Bytes
  submissionHash_gt: Bytes
  submissionHash_lt: Bytes
  submissionHash_gte: Bytes
  submissionHash_lte: Bytes
  submissionHash_in: [Bytes!]
  submissionHash_not_in: [Bytes!]
  submissionHash_contains: Bytes
  submissionHash_not_contains: Bytes
  status: TaskReceiptStatus
  status_not: TaskReceiptStatus
  status_in: [TaskReceiptStatus!]
  status_not_in: [TaskReceiptStatus!]
  submissionDate: BigInt
  submissionDate_not: BigInt
  submissionDate_gt: BigInt
  submissionDate_lt: BigInt
  submissionDate_gte: BigInt
  submissionDate_lte: BigInt
  submissionDate_in: [BigInt!]
  submissionDate_not_in: [BigInt!]
  selectedExecutor: Bytes
  selectedExecutor_not: Bytes
  selectedExecutor_gt: Bytes
  selectedExecutor_lt: Bytes
  selectedExecutor_gte: Bytes
  selectedExecutor_lte: Bytes
  selectedExecutor_in: [Bytes!]
  selectedExecutor_not_in: [Bytes!]
  selectedExecutor_contains: Bytes
  selectedExecutor_not_contains: Bytes
  executionDate: BigInt
  executionDate_not: BigInt
  executionDate_gt: BigInt
  executionDate_lt: BigInt
  executionDate_gte: BigInt
  executionDate_lte: BigInt
  executionDate_in: [BigInt!]
  executionDate_not_in: [BigInt!]
  executionHash: Bytes
  executionHash_not: Bytes
  executionHash_gt: Bytes
  executionHash_lt: Bytes
  executionHash_gte: Bytes
  executionHash_lte: Bytes
  executionHash_in: [Bytes!]
  executionHash_not_in: [Bytes!]
  executionHash_contains: Bytes
  executionHash_not_contains: Bytes
  selfProvided: Boolean
  selfProvided_not: Boolean
  selfProvided_in: [Boolean!]
  selfProvided_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskReceiptWrapper_filter]
  or: [TaskReceiptWrapper_filter]
}

enum TaskReceiptWrapper_orderBy {
  id
  user
  user__id
  user__address
  user__signUpDate
  user__executor
  taskReceipt
  taskReceipt__id
  taskReceipt__userProxy
  taskReceipt__index
  taskReceipt__expiryDate
  taskReceipt__cycleId
  taskReceipt__submissionsLeft
  submissionHash
  status
  submissionDate
  selectedExecutor
  executionDate
  executionHash
  selfProvided
}

input TaskReceipt_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userProxy: Bytes
  userProxy_not: Bytes
  userProxy_gt: Bytes
  userProxy_lt: Bytes
  userProxy_gte: Bytes
  userProxy_lte: Bytes
  userProxy_in: [Bytes!]
  userProxy_not_in: [Bytes!]
  userProxy_contains: Bytes
  userProxy_not_contains: Bytes
  provider: String
  provider_not: String
  provider_gt: String
  provider_lt: String
  provider_gte: String
  provider_lte: String
  provider_in: [String!]
  provider_not_in: [String!]
  provider_contains: String
  provider_contains_nocase: String
  provider_not_contains: String
  provider_not_contains_nocase: String
  provider_starts_with: String
  provider_starts_with_nocase: String
  provider_not_starts_with: String
  provider_not_starts_with_nocase: String
  provider_ends_with: String
  provider_ends_with_nocase: String
  provider_not_ends_with: String
  provider_not_ends_with_nocase: String
  provider_: Provider_filter
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  tasks: [String!]
  tasks_not: [String!]
  tasks_contains: [String!]
  tasks_contains_nocase: [String!]
  tasks_not_contains: [String!]
  tasks_not_contains_nocase: [String!]
  tasks_: Task_filter
  expiryDate: BigInt
  expiryDate_not: BigInt
  expiryDate_gt: BigInt
  expiryDate_lt: BigInt
  expiryDate_gte: BigInt
  expiryDate_lte: BigInt
  expiryDate_in: [BigInt!]
  expiryDate_not_in: [BigInt!]
  cycleId: BigInt
  cycleId_not: BigInt
  cycleId_gt: BigInt
  cycleId_lt: BigInt
  cycleId_gte: BigInt
  cycleId_lte: BigInt
  cycleId_in: [BigInt!]
  cycleId_not_in: [BigInt!]
  submissionsLeft: BigInt
  submissionsLeft_not: BigInt
  submissionsLeft_gt: BigInt
  submissionsLeft_lt: BigInt
  submissionsLeft_gte: BigInt
  submissionsLeft_lte: BigInt
  submissionsLeft_in: [BigInt!]
  submissionsLeft_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskReceipt_filter]
  or: [TaskReceipt_filter]
}

enum TaskReceipt_orderBy {
  id
  userProxy
  provider
  provider__id
  provider__addr
  provider__module
  provider__taskCount
  index
  tasks
  expiryDate
  cycleId
  submissionsLeft
}

input Task_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  conditions: [String!]
  conditions_not: [String!]
  conditions_contains: [String!]
  conditions_contains_nocase: [String!]
  conditions_not_contains: [String!]
  conditions_not_contains_nocase: [String!]
  conditions_: TaskCondition_filter
  actions: [String!]
  actions_not: [String!]
  actions_contains: [String!]
  actions_contains_nocase: [String!]
  actions_not_contains: [String!]
  actions_not_contains_nocase: [String!]
  actions_: Action_filter
  selfProviderGasLimit: BigInt
  selfProviderGasLimit_not: BigInt
  selfProviderGasLimit_gt: BigInt
  selfProviderGasLimit_lt: BigInt
  selfProviderGasLimit_gte: BigInt
  selfProviderGasLimit_lte: BigInt
  selfProviderGasLimit_in: [BigInt!]
  selfProviderGasLimit_not_in: [BigInt!]
  selfProviderGasPriceCeil: BigInt
  selfProviderGasPriceCeil_not: BigInt
  selfProviderGasPriceCeil_gt: BigInt
  selfProviderGasPriceCeil_lt: BigInt
  selfProviderGasPriceCeil_gte: BigInt
  selfProviderGasPriceCeil_lte: BigInt
  selfProviderGasPriceCeil_in: [BigInt!]
  selfProviderGasPriceCeil_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Task_filter]
  or: [Task_filter]
}

enum Task_orderBy {
  id
  conditions
  actions
  selfProviderGasLimit
  selfProviderGasPriceCeil
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: ID!
  scale: BigInt!
  ethPerToken: BigDecimal
}

type TokenList {
  id: ID!
  listId: BigInt!
  listName: String!
  tokens(skip: Int = 0, first: Int = 100, orderBy: RegisteredToken_orderBy, orderDirection: OrderDirection, where: RegisteredToken_filter): [RegisteredToken!]
  activeTokenCount: BigInt!
}

input TokenList_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  listId: BigInt
  listId_not: BigInt
  listId_gt: BigInt
  listId_lt: BigInt
  listId_gte: BigInt
  listId_lte: BigInt
  listId_in: [BigInt!]
  listId_not_in: [BigInt!]
  listName: String
  listName_not: String
  listName_gt: String
  listName_lt: String
  listName_gte: String
  listName_lte: String
  listName_in: [String!]
  listName_not_in: [String!]
  listName_contains: String
  listName_contains_nocase: String
  listName_not_contains: String
  listName_not_contains_nocase: String
  listName_starts_with: String
  listName_starts_with_nocase: String
  listName_not_starts_with: String
  listName_not_starts_with_nocase: String
  listName_ends_with: String
  listName_ends_with_nocase: String
  listName_not_ends_with: String
  listName_not_ends_with_nocase: String
  tokens: [String!]
  tokens_not: [String!]
  tokens_contains: [String!]
  tokens_contains_nocase: [String!]
  tokens_not_contains: [String!]
  tokens_not_contains_nocase: [String!]
  tokens_: RegisteredToken_filter
  activeTokenCount: BigInt
  activeTokenCount_not: BigInt
  activeTokenCount_gt: BigInt
  activeTokenCount_lt: BigInt
  activeTokenCount_gte: BigInt
  activeTokenCount_lte: BigInt
  activeTokenCount_in: [BigInt!]
  activeTokenCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenList_filter]
  or: [TokenList_filter]
}

enum TokenList_orderBy {
  id
  listId
  listName
  tokens
  activeTokenCount
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  scale: BigInt
  scale_not: BigInt
  scale_gt: BigInt
  scale_lt: BigInt
  scale_gte: BigInt
  scale_lte: BigInt
  scale_in: [BigInt!]
  scale_not_in: [BigInt!]
  ethPerToken: BigDecimal
  ethPerToken_not: BigDecimal
  ethPerToken_gt: BigDecimal
  ethPerToken_lt: BigDecimal
  ethPerToken_gte: BigDecimal
  ethPerToken_lte: BigDecimal
  ethPerToken_in: [BigDecimal!]
  ethPerToken_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  scale
  ethPerToken
}

enum TradeType {
  Buy
  Sell
}

enum TransactionType {
  Buy
  Sell
  Add
  Remove
}

type UniswapPair {
  id: ID!
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
}

input UniswapPair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token0_: Token_filter
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  token1_: Token_filter
  reserve0: BigInt
  reserve0_not: BigInt
  reserve0_gt: BigInt
  reserve0_lt: BigInt
  reserve0_gte: BigInt
  reserve0_lte: BigInt
  reserve0_in: [BigInt!]
  reserve0_not_in: [BigInt!]
  reserve1: BigInt
  reserve1_not: BigInt
  reserve1_gt: BigInt
  reserve1_lt: BigInt
  reserve1_gte: BigInt
  reserve1_lte: BigInt
  reserve1_in: [BigInt!]
  reserve1_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UniswapPair_filter]
  or: [UniswapPair_filter]
}

enum UniswapPair_orderBy {
  id
  token0
  token0__id
  token0__scale
  token0__ethPerToken
  token1
  token1__id
  token1__scale
  token1__ethPerToken
  reserve0
  reserve1
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}